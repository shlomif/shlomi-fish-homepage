#include 'template.wml'

<define-tag flag endtag="required">
<preserve f />
<set-var %attributes />
<tr>
<td>
<code><get-var f /></code>
</td>
<td>
%body
</td>
</tr>
<restore f />
</define-tag>

<table style="border-width : thin ; border-color : black">
<flag f="-ansi">
This flag tells the compiler to enforce ANSI C standards
</flag>
<flag f="-pedantic">
More pedantic ansi, warnings for stuff you probably didn't mean.
</flag>
<flag f="-Wall">
Show all reasonable warnings (there are more).
</flag>
<flag f="-g">
Produce debug information, necessary for debugging.
</flag>
<flag f="-l<span style="color : red">library</span>">
Links to a standard library. Use <code>-l<span style="color : red">m</span></code>
to load the standard maths library.
</flag>
<flag f="-c">
Compile or assemble the source files, but do not link. The compiler output is object files corresponding to each source file.
</flag>
<flag f="-S">
Compile only; output assembly code.
</flag>
<flag f="-E">
Pre-process only. Output pre-processed code.
</flag>
<flag f="-D<span style="color : red">macro</span>">
Define a macro, one can also use <code>-D<span style="color : red">macro</span>=<span style="color :red">val</span></code> in order to assign a value
for the macro. This will be used for preprocessing all files.
</flag>
</table>

<points>
<li>
When compiling, I recommend (and Kimchi demands) compiling with:<br />
<code class="cmd">gcc -ansi -pedantic -Wall file1 [file2 [file3...]] -o output</code>
</li>
</points>
