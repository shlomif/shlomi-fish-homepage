package Shlomif::Homepage::FortuneCollections;

use strict;
use warnings;
use 5.014;
use utf8;

use Shlomif::Homepage::FortuneCollections::Record;

use Carp;
use List::Util qw(max);
use YAML::XS (qw(LoadFile));
use JSON::MaybeXS    ();
use Path::Tiny       qw/ path /;
use Text::WrapAsUtf8 qw/ print_utf8 /;

sub _init_fortune
{
    my ( $class, $rec ) = @_;

    return Shlomif::Homepage::FortuneCollections::Record->new($rec);
}

use Shlomif::FindLib ();

my $yaml_data_fn =
    Shlomif::FindLib->rel_path( [ 'Shlomif', 'fortunes-meta-data.yml' ] );
my $orig_fortunes_records =
    LoadFile($yaml_data_fn)->{'shlomif_fortunes_collections'}->{'fortunes'};

my @forts = ( map { __PACKAGE__->_init_fortune($_) } @$orig_fortunes_records, );

sub get_fortune_records
{
    my ($class) = @_;

    return \@forts;
}

sub sorted_fortunes
{
    my ($class) = @_;

    return [ sort { $a->id() cmp $b->id() }
            @{ $class->get_fortune_records() } ];
}

sub nav_data
{
    my ($class) = @_;

    return [ map { $_->nav_record() } @{ $class->get_fortune_records() } ];
}

sub calc_single_fortune_record_toc_entry
{
    my ( $class, $r ) = @_;

    my $id   = $r->id;
    my $desc = $r->desc;

    return ( <<"EOF" );
<li>
<p>
<a href="$id.html"><b>$id</b></a>
(<a href="$id.xml">XML</a>, <a href="$id">Plaintext</a>) -
$desc
</p>
</li>
EOF
}

sub print_single_fortune_record_toc_entry
{
    my ( $class, $r ) = @_;

    my $id   = $r->id;
    my $desc = $r->desc;

    print_utf8( <<"EOF" );
<li>
<p>
<a href="$id.html"><b>$id</b></a>
(<a href="$id.xml">XML</a>, <a href="$id">Plaintext</a>) -
$desc
</p>
</li>
EOF

    return;
}

sub get_single_fortune_record_all_in_one_page_entry
{
    my ( $class, $r ) = @_;

    my $id    = $r->id;
    my $title = $r->title;

    return <<"EOF";
<h2 id="$id">$title</h2>
<div class="fortunes_list">
(((((include "fortunes/xhtmls/$id.xhtml-for-input")))))
</div>
EOF
}

sub calc_fortune_records_toc
{
    my ($class) = @_;
    my $ret = '';

    foreach my $r ( @{ $class->get_fortune_records() } )
    {
        $ret .= $class->calc_single_fortune_record_toc_entry($r);
    }

    return $ret;
}

sub print_fortune_records_toc
{
    my ($class) = @_;

    foreach my $r ( @{ $class->get_fortune_records() } )
    {
        $class->print_single_fortune_record_toc_entry($r);
    }

    return;
}

sub get_fortune_all_in_one_page_html_tt2
{
    my ($class) = @_;
    my $title = "Shlomi Fish Fortunes Collections - All in One Page";

    my $ret = <<"EOF";
[%- # WARNING! This file is autogenerated by $0 . Do not modify directly
    -%]

[%- SET title = "$title" -%]
[%- SET desc = "$title" -%]

@{[$class->_get_common_tt2]}

[%- WRAPPER wrap_html -%]

<nav class="page_toc">
<h2 id="toc">Table of Contents</h2>
<ul>
EOF

    foreach my $r ( @{ $class->get_fortune_records() } )
    {

        my $id    = $r->id();
        my $title = $r->title();

        $ret .= <<"FOO_EOF" ;
<li><a href="#$id">$title</a><br />
(((((include "fortunes/xhtmls/$id.toc-xhtml")))))
</li>
FOO_EOF

    }

    $ret .= "</ul>\n";
    $ret .= "</nav>\n";

    foreach my $r ( @{ $class->get_fortune_records() } )
    {
        $ret .= $class->get_single_fortune_record_all_in_one_page_entry($r);
    }

    $ret .= "\n[% END %]\n";

    return $ret;
}

sub get_fortune_all_in_one_page_html_wml
{
    my ($class) = @_;

    my $ret = <<"EOF";
#include "template.wml"
;;; WARNING! This file is autogenerated by $0 . Do not modify directly.

<latemp_subject "Shlomi Fish Fortunes Collections - All in One Page" />
<latemp_meta_desc "Shlomi Fish Fortunes Collections - All in One Page" />

@{[$class->_get_common_wml]}

<nav class="page_toc">
<h2 id="toc">Table of Contents</h2>
<ul>
EOF

    foreach my $r ( @{ $class->get_fortune_records() } )
    {

        my $id    = $r->id();
        my $title = $r->title();

        $ret .= <<"FOO_EOF" ;
<li><a href="#$id">$title</a><br />
(((((include "fortunes/xhtmls/$id.toc-xhtml")))))
</li>
FOO_EOF

    }

    $ret .= "</ul>\n";
    $ret .= "</nav>\n";

    foreach my $r ( @{ $class->get_fortune_records() } )
    {
        $ret .= $class->get_single_fortune_record_all_in_one_page_entry($r);
    }

    return $ret;
}

my $deps_mtime_max =
    max( map { path($_)->stat->mtime } __FILE__, $yaml_data_fn );

sub _print_if_update_needed
{
    my ( $class, $path, $contents_promise ) = @_;

    my $fh = path($path);

    if ( ( !$fh->exists() ) || ( $deps_mtime_max > $fh->stat->mtime ) )
    {
        $fh->spew_utf8( $contents_promise->(), );
    }

    return;
}

sub write_fortune_all_in_one_page_to_file
{
    my ( $class, $filename ) = @_;

    $class->_print_if_update_needed(
        $filename,
        sub {
            return $class->get_fortune_all_in_one_page_html_tt2();
        },
    );

    return;
}

sub _get_common_tt2
{
    my $self = shift;

    return <<"EOF";
[% BLOCK page_extra_head_elements %]
<link rel="stylesheet" href="[% base_path %]fortunes.css" media="screen" />
[% END %]
EOF
}

sub _get_common_wml
{
    my $self = shift;

    return <<"EOF";
<page_extra_head_elements>
<link rel="stylesheet" href="\$(ROOT)/fortunes.css" media="screen" />
</page_extra_head_elements>
EOF
}

sub get_single_fortune_page_html_tt2
{
    my ( $class, $r ) = @_;

    my $id    = $r->id();
    my $title = $r->title();

    return <<"EOF";
[%- # WARNING! This file is autogenerated by $0 . Do not modify directly
    -%]

[%- SET title = "@{[$r->page_title()]}" -%]
[%- SET desc = "@{[$r->meta_desc()]}" -%]

@{[$class->_get_common_tt2]}

[%- WRAPPER wrap_html -%]

<h2>About</h2>

[% INCLUDE "fortunes/corner_image.tt2" %]

@{[$r->about_blurb() =~ s=\$\(ROOT\)/=[% base_path %]=gr]}

<h3>Table of Contents</h3>

(((((include "fortunes/xhtmls/$id.toc-xhtml")))))

<h2 id="fortunes-list">The Fortunes Themselves</h2>
<div class="fortunes_list">
(((((include "fortunes/xhtmls/$id.xhtml-for-input")))))
</div>

[% END %]
EOF
}

sub get_single_fortune_page_html_wml
{
    my ( $class, $r ) = @_;

    my $id    = $r->id();
    my $title = $r->title();

    return <<"EOF";
#include "template.wml"
;;; WARNING! This file is autogenerated by $0 . Do not modify directly.

<latemp_subject "@{[$r->page_title()]}" />
<latemp_meta_desc "@{[$r->meta_desc()]}" />

@{[$class->_get_common_wml]}

<h2*>About</h2*>

#include "fortunes/corner_image.wml"

@{[$r->about_blurb()]}

<h3>Table of Contents</h3>

(((((include "fortunes/xhtmls/$id.toc-xhtml")))))

<h2 id="fortunes-list">The Fortunes Themselves</h2>
<div class="fortunes_list">
(((((include "fortunes/xhtmls/$id.xhtml-for-input")))))
</div>
EOF
}

sub print_all_fortunes_html_wmls
{
    my ($class) = @_;

    my $dir = path("src/humour/fortunes");

    $dir->mkpath;
    foreach my $r (
        @{ Shlomif::Homepage::FortuneCollections->get_fortune_records() } )
    {
        my $path = "$dir/@{[$r->id()]}.html.tt2";
        $class->_print_if_update_needed(
            $path,
            sub {
                return $class->get_single_fortune_page_html_tt2($r);
            },
        );
    }
}

sub write_epub_json
{
    my ( $class, $fn ) = @_;

    path($fn)->spew(
        JSON::MaybeXS->new( utf8 => 1, canonical => 1 )->encode(
            +{
                filename => $fn,
                title    => "Quotes / Fortunes Cookies by Shlomi Fish",
                authors  => [
                    {
                        name => "Shlomi Fish",
                        sort => "Fish, Shlomi",
                    }
                ],
                cover      => "shlomif-fortunes.png",
                rights     => "CC-by-sa",
                publisher  => 'http://www.shlomifish.org/',
                language   => 'en',
                subjects   => [ 'Humor', ],
                identifier => {
                    scheme => 'URL',
                    value  => q#http://www.shlomifish.org/humour/fortunes/#,
                },
                contents => [
                    {
                        type   => 'toc',
                        source => 'toc.html',
                    },
                    (
                        map {
                            +{
                                type   => 'text',
                                source => ( $_->id() . ".xhtml" ),
                            }
                        } @{ $class->get_fortune_records() },
                    ),
                ],
                toc => {
                    depth    => 2,
                    parse    => ['text'],
                    generate => {
                        title => 'Index',
                    },
                },
            }
        )
    );
}

1;
