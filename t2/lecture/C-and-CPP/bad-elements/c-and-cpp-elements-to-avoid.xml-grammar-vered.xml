<?xml version="1.0" encoding="utf-8"?>
<document xmlns="http://www.shlomifish.org/open-source/projects/XML-Grammar/Vered/" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.2.0" xml:lang="en-GB" xml:id="index">
<info>
<title>C and C++ Elements to Avoid</title>
</info>
<body>
<preface xml:id="intro">
<info>
<title>Introduction</title>
</info>
<p>
Often when people ask for help with C or C++ code, they show code that
suffers from many bad or outdated elements. This is expected, as there
are many bad tutorials out there, and lots of bad code that people
have learned from, but it is still not desirable. To encourage best
practices, here is a document of some of the common bad elements that
people tend to use and some better practices that should be used instead.
</p>
<p>
A book I read said, that as opposed to most previous idea systems, they
were trying to <b>liquidate negatives</b> instead of to instil positives
in people. So in the spirit of liquidating negatives, this tutorial-in-reverse
aims to show you what <b>not to do</b>.
</p>
<p>
<strong>Note:</strong> Please don't think this advice is meant as gospel.
There are some instances where one can expect to deviate from it, and a lot
of it can be considered only the opinion of its originators. I tried to filter
the various pieces of advice I found in the <a xlink:href="#sources_of_advice">sources</a>
and get rid of things that are either a matter of taste, or not so critical,
or that have arguments for and against (so-called
<a xlink:href="http://bikeshed.com/">colour of the bike shed arguments</a>),
but some of the advice here may still be controversial.
</p>
</preface>
<section xml:id="bad-elements">
<info>
<title>The List of Bad Elements</title>
</info>
<item xml:id="no-indentation">
<info>
<title>No Indentation</title>
</info>
<p>
<a xlink:href="http://en.wikipedia.org/wiki/Indent_style">Indentation</a> means
that the contents of every block are promoted from their containing environment
by using a shift of some space. This makes the code easier to read and follow.
</p>
<p>
Code without indentation is harder to read and so should be avoided.
<a xlink:href="http://en.wikipedia.org/wiki/Indent_style">The Wikipedia article</a>
lists several styles - pick one and follow it.
</p>
</item>
<item xml:id="no-compiler-warning-flags">
<info>
<title>Compiling without warnings flags</title>
</info>

<p>
C and C++ Compilers have flags to toggle on warnings such as
<code>-Wall</code>, <code>-Wextra</code>, or <code>-Weverything</code>.
It is a good idea to specify as many of them as possible when compiling the
code and to fix the warnings where appropriate.
</p>

<p>
Someone gave me this GCC warnings’ theme:
</p>

<code_blk syntax="bash">
#!/bin/bash
gcc -std=c99 -Wall -W -Wformat-nonliteral -Wcast-align -Wpointer-arith -Wbad-function-cast -Wmissing-prototypes -Wstrict-prototypes -Wmissing-declarations -Winline -Wundef -Wnested-externs -Wcast-qual -Wshadow -Wwrite-strings -Wunused -Wfloat-equal -pedantic -ansi -Wbad-function-cast  -Wmissing-declarations -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition -Wstrict-prototypes -Wdeclaration-after-statement
</code_blk>

</item>
<item xml:id="calling-variables-file">
<info>
<title>Calling variables &quot;file&quot;</title>
</info>
<p>
Some people call their variables "file". However, file can mean either
<a xlink:href="http://en.wikipedia.org/wiki/File_descriptor">file handles</a>,
file names, or the contents of the file. As a result, this should be avoided
and one can use the abbreviations "fh" for file handle, or "fn" for filenames
instead.
</p>
</item>
<item xml:id="identifiers-without-underscores">
<info>
<title>Identifiers without underscores</title>
</info>
<p>
Some people name their identifiers as several words all in lowercase and
not separated by underscores ("_"). As a result, this makes the code harder
to read. So instead of:
</p>
<code_blk syntax="perl">
char * namesofpresidents[NUM_PRESIDENTS];
</code_blk>
<p>
Say:
</p>
<code_blk syntax="perl">
char * names_of_presidents[NUM_PRESIDENTS];
</code_blk>
<p>
Or maybe:
</p>
<code_blk syntax="perl">
char * presidents_names[NUM_PRESIDENTS];
</code_blk>
</item>
<item xml:id="paragraphs">
<info>
<title>Write code in Paragraphs using Empty Lines</title>
</info>
<p>
If one of your blocks is long, split it into "code paragraphs", with empty
lines between them and with each paragraph doing one thing. Then, it may be a
good idea to precede each paragraph with a comment explaining what it does, or
to extract it into its own function or method.
</p>
</item>
<item xml:id="lowercase_modules_and_pkgs">
<info>
<title>Don't start Classes with a Lowercase Letter</title>
</info>
<p>
In C++, classes <b>TODO: FILL IN</b>.
</p>
</item>
<item xml:id="non-intrusive-commenting">
<info>
<title>Avoid Intrusive Commenting</title>
</info>
<p>
Some commenting is too intrusive and interrupts the flow of reading the code.
Examples for that are the <code>/////////////</code> or
<code>/*****************/</code> hard-rules that
some people put in their code, the comments using multiple slashes
like <code>///</code>, or excessively long comment block. Please avoid all those.
</p>
<p>
Some schools of software engineering argue that if the code's author feels
that a comment is needed, it usually indicates that the code is not clear
and should be factored better (like extracting a method or a subroutine with
a meaningful name.). It probably does not mean that you should avoid writing
comments altogether, but excessive commenting could prove as a red flag.
</p>
<p>
If you're interested in documenting the public interface of your modules and
command-line programs, refer to tools such as
<a xlink:href="http://en.wikipedia.org/wiki/Doxygen">Doxygen</a>, which may
prove of use.
</p>
</item>
<item xml:id="accessing_object_slots_directly">
<info>
<title>Accessing Object Slots Directly</title>
</info>
<p>
<b>TODO: FILL IN</b>
</p>
</item>
<item xml:id="caret_and_dollar_sign_in_regexes">
<info>
<title>'^' and '$' in Regular Expressions</title>
</info>
<p>
Some people use "^" and "$" in regular expressions to mean
beginning-of-the-string or end-of-the-string. However, they can mean
beginning-of-a-line and end-of-a-line respectively using the <code>/m</code> flag
which is confusing. It's a good idea to use <code>\A</code> for start-of-string
and <code>\z</code> for end-of-string always (assuming they are supported
by the regex syntax), and to specify the <code>/m</code> flag
if one needs to use "^" and "$" for start/end of a line.
</p>
</item>
<item xml:id="magic_numbers">
<info>
<title>Magic Numbers</title>
</info>
<p>
Your code should not include <a xlink:href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants">unnamed
numerical constants also known as "magic numbers" or "magic constants"</a>.
For example, there is one in this code to shuffle a deck of cards:
</p>
<bad_code syntax="c">
for (int i = 0; i &lt; 52; i++)
{
    int j = i + int(rand(52-i));
    swap(cards[i], cards[j]);
}
</bad_code>
<p>
This code is bad because the meaning of 52 is not explained and it is
arbitrary. A better code would be:
</p>
<code_blk syntax="c">
const int deck_size = 52;

for (int i = 0; i &lt; deck_size; i++)
{
    int j = i + int(rand(deck_size-i));
    swap(cards[i], cards[j]);
}
</code_blk>
</item>
<item xml:id="mixing_tabs_and_spaces">
<info>
<title>Mixing Tabs and Spaces</title>
</info>
<p>
Some improperly configured text editors may be used to write code that, while
indented well at a certain tab size looks terrible on other tab sizes, due
to a mixture of tabs and spaces. So either use tabs for indentation or make
sure your tab key expands to a constant number of spaces. You may also wish
to make use of auto-formatters like <a xlink:href="http://en.wikipedia.org/wiki/Indent_%28Unix%29">GNU indent</a> to properly format your code.
</p>
</item>
<item xml:id="several_synchronised_arrays">
<info>
<title>Several synchronised arrays.</title>
</info>
<p>
<b>TODO : FILL IN</b>
Related to “varvarname” is the desire of some beginners to use several
different arrays with synchronised content, so the same index at every array
will contain a different piece of data for the same record:
</p>
<bad_code syntax="perl">
my @names;
my @addresses;
my @ages;
my @phone_numbers;

.
.
.

push @names, 'Isaac Newton';
push @addresses, '10 Downing St.';
push @ages, 25;
push @phone_numbers, '123456789';
</bad_code>
<p>
These arrays will become hard to synchronise, and this is error prone. A
better idea would be to use an array (or a different data structure) of
hash references or objects:
</p>
<code_blk syntax="perl">
my @people;

push @people, Person->new(
    {
        name => 'Isaac Newton',
        address => '10 Downing St.',
        age => 25,
        phone_number => '123456789',
    },
);
</code_blk>
</item>
<item xml:id="modifying_iterated_data_structures">
<info>
<title>Modifying data structures while iterating through them.</title>
</info>
<p>
Some people ask about how to add or remove elements to an existing array or
a different container when iterating over them using loops. The
answer to that is that it likely won't be handled too well, and it expects
that during loops the keys of a data structure will remain constant.
</p>
<p>
The best way to achieve something similar is to populate a new container
during the loop. So do that instead.
</p>
</item>
<item xml:id="code_in_foreign_lang">
<info>
<title>Comments and Identifiers in a Foreign Language</title>
</info>
<p>
Apparently, many non-native English speakers write code with comments and
even identifiers in their native language. The problem with this is that
programmers who do not speak that language will have a hard time understanding
what is going on here, especially after the writers of the foreign language
code post it in to an Internet forum in order to get help with it.
</p>
<p>
Consider what Eric Raymond wrote in
<a xlink:href="http://www.catb.org/~esr/faqs/hacker-howto.html#skills4">his
"How to Become a Hacker" document</a> (where hacker is a software enthusiast
and not a computer intruder):
</p>
<blockquote>
<p>
4. If you don't have functional English, learn it.
</p>
<p>
As an American and native English-speaker myself, I have previously been
reluctant to suggest this, lest it be taken as a sort of cultural imperialism.
But several native speakers of other languages have urged me to point out that
English is the working language of the hacker culture and the Internet, and
that you will need to know it to function in the hacker community.
</p>
<p>
Back around 1991 I learned that many hackers who have English as a second
language use it in technical discussions even when they share a birth tongue;
it was reported to me at the time that English has a richer technical
vocabulary than any other language and is therefore simply a better tool for
the job. For similar reasons, translations of technical books written in
English are often unsatisfactory (when they get done at all).
</p>
<p>
Linus Torvalds, a Finn, comments his code in English (it apparently never
occurred to him to do otherwise). His fluency in English has been an important
factor in his ability to recruit a worldwide community of developers for Linux.
It's an example worth following.
</p>
<p>
Being a native English-speaker does not guarantee that you have language skills
good enough to function as a hacker. If your writing is semi-literate,
ungrammatical, and riddled with misspellings, many hackers (including myself)
will tend to ignore you. While sloppy writing does not invariably mean sloppy
thinking, we've generally found the correlation to be strong — and we have no
use for sloppy thinkers. If you can't yet write competently, learn to.
</p>
</blockquote>
<p>
So if you're posting code for public scrutiny, make sure it is written with
English identifiers and comments.
</p>
</item>

<item xml:id="using-namespace-std">
<info>
<title>“using namespace std;”</title>
</info>

<p>
One can often see C++ code with <code>using namespace std;</code> on top, but that is
a bad idea. The C++ standard requires that the “std” namespace contain certain
symbols, but it doesn't prevent it from containing <b>other</b> symbols
(presumably, stdlib implementation details). If you use <code>using namespace
std;</code>, you never know what else you might be bringing into the global
namespace.
</p>

<p>
One possible alternative is to selectively do
<code>using std::cout;</code>, <code>using std::string;</code> and so forth,
for each symbol that you wish to use.
</p>

</item>

<item xml:id="law_of_demeter">
<info>
<title>The Law of Demeter</title>
</info>
<p>
See the <a xlink:href="http://en.wikipedia.org/wiki/Law_of_Demeter">Wikipedia article
about “The Law of Demeter”</a> for more information. Namely, doing many nested
method calls like
<code>obj-&gt;get_employee('sophie')-&gt;get_address()-&gt;get_street()</code>
is not advisable, and should be avoided.
</p>
<p>
A better option would be to provide methods in the containing objects to
access those methods of their contained objects. And an even better way would
be to structure the code so that each object handles its own domain.
</p>
</item>
<item xml:id="delegating_parameter_passing">
<info>
<title>Passing parameters in delegation</title>
</info>
<p>
Sometimes we encounter a case where subroutines each pass the same parameter
to one another in delegation, just because the innermost subroutines in the
call-stack need it.
</p>
<p>
To avoid it, create a class, and declare methods that operate on the
fields of the class, where you can assign the delegated arguments.
</p>
</item>
<item xml:id="duplicate_code">
<info>
<title>Duplicate Code</title>
</info>
<p>
As noted in
<a xlink:href="http://www.shlomifish.org/philosophy/books-recommends/#refactoring">Martin
Fowler's "Refactoring"</a> book (but held as a fact for a long time
beforehand),
<a xlink:href="http://en.wikipedia.org/wiki/Duplicate_code">duplicate code</a> is a
code smell, and should be avoided. The solution is to extract duplicate
functionality into subroutines, methods and classes.
</p>
</item>
<item xml:id="long_functions">
<info>
<title>Long Functions and Methods</title>
</info>
<p>
Another common code smell is
<a xlink:href="http://c2.com/cgi/wiki?LongMethodSmell">long
subroutines and methods</a>. The solution to these is to extract several
shorter methods out, with meaningful names.
</p>
</item>
<item xml:id="ternary_operator_instead_of_if_else">
<info>
<title>Using the ternary operator for side-effects instead of if/else</title>
</info>
<p>
People who wish to use the ternary
inline- conditional operator (<code>? :</code>) for choosing to execute between
two different statements with side-effects
instead of using <code>if</code> and <code>else</code>. For example:
</p>
<bad_code syntax="cpp">
cond_var ? (hash["if_true"] += "Cond var is true")
          : (hash["if_false"] += "Cond var is false")
</bad_code>
<p>
(This is assuming the ternary operator was indeed written correctly, which
is not always the case).
</p>
<p>
However, the ternary operator is meant to be an expression that is a choice
between two values and should not be used for its side-effects. To do the
latter, just use <code>if</code> and <code>else</code>:
</p>
<code_blk syntax="cpp">
if (cond_var)
{
    hash["if_true"] += "Cond var is true";
}
else
{
    hash["if_false"] += "Cond var is false";
}
</code_blk>
<p>
This is safer, and better conveys one’s intentions.
</p>
<p>
For more information, refer to
<a xlink:href="http://www.nntp.perl.org/group/perl.beginners/2012/04/msg120480.html">a
relevant thread on the Perl beginners mailing list</a> (just make sure you read
it in its entirety).
</p>
</item>

<item xml:id="global_vars_iface">
<info>
<title>Using Global Variables as an Interface to the Module</title>
</info>
<p>
While it is possible to a large extent, one should generally not use global
variables as an interface to a module, and should prefer having a procedural
or an object oriented interface instead.
</p>
</item>

<item xml:id="global_or_function_static_vars">
<info>
<title>Using Global Variables or Function-"static" Variables</title>
</info>
<p>
<b>TODO : FILL IN</b> - bad for multi-threading, re-entrancy, instantiation,
etc.
</p>
</item>

<item xml:id="declaring_all_vars_at_top">
<info>
<title>Declaring all variables at the top</title>
</info>
<p>
<b>TODO : FILL IN</b>
Some inexperienced Perl programmers, possibly by influence from languages
such as C, like to declare all variables used by the program at the top of
the program or the relevant subroutines. Like so:
</p>
<bad_code syntax="c">
TODO : FILL IN
</bad_code>
<p>
However, this is bad form in Perl, and the preferable way is to declare all
the variables when they are first used, and at the innermost scope where they
should retain their value. This will allow to keep track of them better.
</p>
</item>
<item xml:id="trailing-whitespace">
<info>
<title>Trailing Whitespace</title>
</info>
<p>
With many editors, it can be common to write new code or modify existing
one, so that some lines will contain trailing whitespace, such as
spaces (ASCII 32 or 0x20) or tabs characters. These trailing spaces normally
do not cause much harm, but they are not needed, harm the code’s consistency,
may undermine analysis by patching/diffing and version control tools.
Furthermore, they usually can be eliminated easily without harm.
</p>
<p>
Here is an example of having trailing whitespace demonstrated using the
<code>--show-ends</code> flag of the GNU <a xlink:href="https://en.wikipedia.org/wiki/Cat_%28Unix%29">cat command</a>:
</p>
<code_blk syntax="text">
&gt; cat --show-ends toss-coins.pl
#!/usr/bin/perl$
$
use strict;$
use warnings;$
$
my @sides = (0,0);$
$
my ($seed, $num_coins) = @ARGV;$
$
srand($seed);  $
$
for my $idx (1 .. $num_coins)$
{$
    $sides[int(rand(2))]++;$
    $
    print "Coin No. $idx\n";$
}$
$
print "You flipped $sides[0] heads and $sides[1] tails.\n";$
&gt;
</code_blk>
<p>
While you should not feel bad about having trailing space, it is a good idea
to sometimes search for them using a command such as <code>ack '[ \t]+$'</code>
(in version 1.x it should be <code>ack -a '[ \t]+$'</code>, see
<a xlink:href="http://beyondgrep.com/">ack</a>), and get rid of them.
</p>
<p>
Some editors also allow you to highlight trailing whitespace when present. See
for example:
</p>
<ul>
<li>
<p>
<a xlink:href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">Highlight
unwanted spaces in Vim</a>. Also see <a xlink:href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">this post</a>.
</p>
</li>
<li>
<p>
<a xlink:href="http://emacswiki.org/emacs/ShowWhiteSpace">EmacsWiki:
Show White Space</a>.
</p>
</li>
</ul>
<p>
Finally, one can check and report trailing whitespace using the following
CPAN modules:
</p>
<ul>
<li>
<p>
<cpan_self_mod m="Test::EOL" />.
</p>
</li>
<li>
<p>
<cpan_self_mod m="Test::TrailingSpace" />.
</p>
</li>
</ul>
</item>
<item xml:id="code_and_markup_injection">
<info>
<title>Code and Markup Injection</title>
</info>
<p>
<b>TODO : FILL IN</b>
Care must be taken when constructing statements that are passed to an
interpreter, when putting arbitrary strings inside (using string interpolation
or other methods). This is because if the strings are subject to input from
the outside world (including the users), then one can use specially crafted
strings for executing arbitrary commands and exploiting the system.
</p>
<p>
An example of this is outputting HTML using
<code>print "&lt;p&gt;" . $paragraph_text . "&lt;/p&gt;\n";</code> which may allow
inserting arbitrary, malicious, markup inside <code>$paragraph_text</code>,
which may include malicious JavaScript, that can steal passwords or alter
the page’s contents.
</p>
<p>
For more information, see:
</p>
<ol>
<li>
<p>
<a xlink:href="../../topics/security/code-markup-injection/">“Code/Markup Injection
and Its Prevention”</a> resource on this site.
</p>
</li>
<li>
<p>
Wikipedia articles about
<a xlink:href="http://en.wikipedia.org/wiki/SQL_injection">SQL injection</a>
and
<a xlink:href="http://en.wikipedia.org/wiki/Cross-site_scripting">Cross-site
scripting</a>.
</p>
</li>
<li>
<p>
The site <a xlink:href="http://bobby-tables.com/">Bobby Tables</a> about SQL
injections.
</p>
</li>
</ol>
</item>
<item xml:id="using_undeclared_symbols">
<info>
<title>Using Undeclared Symbols</title>
</info>
<p>
<b>TODO : FILL IN</b>
</p>
</item>
<item xml:id="decls_not_in_common_headers">
<info>
<title>Declarations not in common headers</title>
</info>
<p>
When declaring external functions, variables, classes, etc. make sure to
put them in a common header file, which will also be included by the .c or
.cpp file actually defining the common resource. This way if their type
is changed, you will get a compiler error in the module that defines it,
and there will be more certainty that there isn’t a type mismatch.
</p>
</item>
<!-- TODO:
* header with compiler guards.
-->
<item xml:id="long_lines">
<info>
<title>Overly Long Lines in the Source Code</title>
</info>
<p>
It is a good idea to avoid overly long lines in the source code, because
they need to be scrolled to read, and may not fit within the margins of your
co-developers’ text editors. If the lines are too long, you should break
them or reformat them (for example, by adding a newline before or after an
operator), and by breaking long string constants into several lines using
the string concatenation operator - <code>.</code>.
</p>
<p>
Many coding standards require lines to fit within 80 characters or
78 characters or so, and you should standardise on a similar limit for your
own code.
</p>
</item>
<item xml:id="dot_asterisk">
<info>
<title>Regular Expressions starting or ending with “.*”</title>
</info>
<p>
It is not necessary to put <code>.*</code> or <code>.*?</code> into the
beginning or end of regular expressions to match something anywhere inside the
string. So for example <code>regcomp(&amp;regex, ".*ab+c")</code> can be
replaced with the simpler: <code>regcomp(&amp;regex, "ab+c")</code>. If you
wish to match and extract the prefix, you should say <code>(.*?)</code> or
<code>(.*)</code>.
</p>
</item>
<item xml:id="populating_array_with_same_reference">
<info>
<title>Populating a Data Structure with Multiple Copies of the Same Pointer or Reference</title>
</info>
<p>
You can sometimes see code like that:
</p>
<bad_code syntax="c">
int * my_array[NUM];

int * sub_array = malloc(sizeof(sub_array[0]) * SUB_NUM);
if (! sub_array)
{
    /* Handle out-of-memory */
}
for (int i = 0 ; i &lt; NUM ; i++)
{
    populate_sub_array(i, sub_array);
    my_array[i] = sub_array;
}
</bad_code>
<p>
The problem with code like this is that the same physical memory location
is being used in all places in the array, and so they will
always be synchronised to the same contents.
</p>
<p>
As a result, the code excerpts should be written as such instead:
</p>
<code_blk syntax="perl">
int * my_array[NUM];

for (int i = 0 ; i &lt; NUM ; i++)
{
    int * sub_array = malloc(sizeof(sub_array[0]) * SUB_NUM);
    if (! sub_array)
    {
        /* Handle out-of-memory */
    }
    populate_sub_array(i, sub_array);
    my_array[i] = sub_array;
}
my @array_of_arrays = map { [] } (1 .. $num_rows);
</code_blk>
</item>
<item xml:id="one_var_for_two_purposes">
<info>
<title>Using One Variable for Two (or More) Different Purposes</title>
</info>
<p>
Within the scope of its declaration, a variable should serve one purpose, and
serve it well. One should not re-use a variable for a completely different
purpose later on in the scope.
</p>
</item>
<item xml:id="premature_optimization">
<info>
<title>Premature Optimisation</title>
</info>
<p>
On various online forums, we are often getting asked questions like:
“What is the speediest way to do task X?” or “Which of these pieces of code
will run faster?”. The answer is that in this day and age of extremely fast
computers, you should optimise for clarity and modularity first, and worry
about speed when and if you find it becomes a problem. Professor
Don Knuth had this to say about it:
</p>
<blockquote>
<p>
The improvement in speed from Example 2 to Example 2a is only about 12%, and
many people would pronounce that insignificant. The conventional wisdom shared
by many of today's software engineers calls for ignoring efficiency in the
small; but I believe this is simply an overreaction to the abuses they see
being practiced by penny-wise-and-pound-foolish programmers, who can't debug or
maintain their "optimized" programs. In established engineering disciplines a
12% improvement, easily obtained, is never considered marginal; and I believe
the same viewpoint should prevail in software engineering. Of course I wouldn't
bother making such optimizations on a one-shot job, but when it's a question of
preparing quality programs, I don't want to restrict myself to tools that deny
me such efficiencies.
</p>

<p>
There is no doubt that the grail of efficiency leads to abuse. Programmers
waste enormous amounts of time thinking about, or worrying about, the speed of
noncritical parts of their programs, and these attempts at efficiency actually
have a strong negative impact when debugging and maintenance are considered. We
should forget about small efficiencies, say about 97% of the time: premature
optimization is the root of all evil.
</p>
</blockquote>

<p>
(Knuth reportedly attributed the exact quote it to C.A.R. Hoare).
</p>
<p>
While you should be conscious of efficiency, and the performance sanity of
your code and algorithms when you write programs, excessive and premature
micro-optimisations are probably not going to yield a major performance
difference.
</p>
<p>
If you do find that your program runs too slowly, refer to our
<a xlink:href="http://c-begin.wikia.com/wiki/Profiling_and_Optimizing">resources
about Optimising and Profiling code</a>.
</p>
</item>
<item xml:id="version_control">
<info>
<title>Not Using Version Control</title>
</info>
<p>
For everything except for short throwaway scripts, or otherwise incredibly
short programs, there is no good excuse, not to use a version control system
(a.k.a: "revision control systems", "source control systems", or more in
general as part of "software configuration management"). This is especially
true nowadays given the availability of several powerful, easy to use,
open-source (and as a result free-of-charge), and cross-platform, version
control systems, that you should have not a lot of problems to deploy, learn
and use.
</p>
<p>
For more information and the motivation behind using version control systems,
see
<a xlink:href="http://perl-begin.org/tutorials/perl-for-newbies/part5/#page--version-control--DIR">the
relevant section out of the fifth part of “Perl for Perl Newbies”</a>
for more discussion about the motivation behind that, some links and a
demonstration.
</p>
<p>
Some links for further discussion:
</p>
<ul>
<li>
<p>
<a xlink:href="http://better-scm.shlomifish.org/">The Better SCM Site</a>
</p>
</li>
<li>
<p>
<a xlink:href="http://producingoss.com/en/vc-systems.html">The Free Version Control
Systems Appendix of <i>Producing Open Source Software</i></a>.
</p>
</li>
<li>
<p>
The Wikipedia
<a xlink:href="http://en.wikipedia.org/wiki/List_of_revision_control_software">List
of revision control software</a>.
</p>
</li>
<li>
<p>
<a xlink:href="http://perlhacks.com/2012/03/you-must-hate-version-control-systems/">“You
Must Hate Version Control Systems”</a> - a discussion on Dave Cross’ blog
about best practices in the software development industry.
</p>
</li>
</ul>
</item>
<item xml:id="automated_tests">
<info>
<title>Writing Automated Tests</title>
</info>
<p>
Automated tests help verify that the code is working correctly, that bugs
are not introduced due to refactoring or the addition of new feature, and also
provide specifications and interface documentation to the code. As a result,
automated tests have been considered a good practise for a long time.
</p>
<p>
For more information about how to write automated tests, see
<a xlink:href="http://c-begin.wikia.com/wiki/Testing_Tools">our page</a> about
quality assurance in C.
</p>
</item>
<item xml:id="parsing_using_regex">
<info>
<title>Parsing XML/HTML/JSON/CSV/etc. using regular expressions</title>
</info>
<p>
You should not try to parse HTML, XML, JSON, CSV, and other complex grammars
using regular expressions. Instead, use a parsing library. <b>TODO : FILL IN</b>
</p>
</item>
<item xml:id="generating_non_valid_markup">
<info>
<title>Generating invalid Markup (of HTML/etc.)</title>
</info>
<p>
You should make sure that the HTML markup you generate is
<a xlink:href="http://en.wikipedia.org/wiki/XHTML#Valid_XHTML_documents">valid
HTML</a> and that it validates as XHTML 1.0, HTML 4.01, HTML 5.0, or a
different modern standard. For more information, see
<a xlink:href="http://www.shlomifish.org/lecture/LAMP/slides/compatibility/">the
“Designing for Compatibility” section</a> in a previous talk.
</p>
</item>
<item xml:id="capturing_instead_of_clustering_in_regexes">
<info>
<title>Capturing Instead of Clustering in Regular Expressions</title>
</info>
<p>
If you want to group a certain sub-expression in a
<a xlink:href="$(ROOT)/topics/regular-expressions/">regular expression</a>,
without the need to capture it (into the <code>$1</code>, <code>$2</code>,
<code>$3</code>, etc. variables and related capture variables), then
you should cluster them using <code>(?: … )</code> instead of capturing
them using a plain <code>( … )</code>, or alternatively not grouping them
at all if it's needed. That is because using a cluster is faster and cleaner
and better conveys your intentions than using a capture.
</p>

<bad_code syntax="c">
TODO : FILL IN.
</bad_code>

<p>
A better code would be:
</p>

<code_blk syntax="c">
TODO : FILL IN.
</code_blk>

</item>

<item xml:id="buffer_overflows">
<info>
<title>Buffer Overflows</title>
</info>

<p>
<b>TODO : FILL IN</b>
</p>

</item>

<item xml:id="format_string_vulnerabilities">
<info>
<title>Format String Vulnerabilities (printf/etc.)</title>
</info>

<p>
<b>TODO : FILL IN</b>
</p>

</item>

<item xml:id="callbacks_that_dont_accept_a_context_variable">
<info>
<title>Callbacks that do not accept a “void *” context variable</title>
</info>

<p>
Sometimes called a "baton".
<b>TODO : FILL IN</b>
</p>

</item>

<item xml:id="not_using_a_proper_build_system">
<info>
<title>Not Using a Proper Build System</title>
</info>

<p>
It is a very good idea for C and C++ code to use a good build and configuration
system. There’s
<a xlink:href="http://www.shlomifish.org/open-source/resources/software-tools/">a page listing some prominent alternatives</a>. For simple setups, a make file
may be suitable, but more complex tasks require a configuration and build
system such as <a xlink:href="http://en.wikipedia.org/wiki/CMake">CMake</a>.
</p>
</item>

<item xml:id="not_using_a_bug_tracker">
<info>
<title>Not Using a Bug Tracker/Issue Tracker</title>
</info>

<p>
It is important to use a <a
xlink:href="http://en.wikipedia.org/wiki/Bug_tracking_system">bug tracking</a>
system to maintain a list of bugs and issues that need to be fixed in your
code, and of features that you'd like to work on. Sometimes, a simple file kept
inside the version control system would be enough, but at other times, you
should opt for a web-based bug tracker.
</p>

<p>
For more information, see:
</p>

<ul>

<li>
<p>
<a xlink:href="http://www.joelonsoftware.com/articles/fog0000000029.html">Joel
on Software article about “Painless Bug Tracking”</a>
</p>
</li>

<li>
<p>
<a xlink:href="http://www.shlomifish.org/open-source/resources/software-tools/#bug_tracking">“Bug
Trackers” list</a> on Shlomi Fish’s “Software Construction and Management
Tools” page.
</p>
</li>

<li>
<p>
<a xlink:href="http://www.thegeekstuff.com/2010/08/bug-tracking-system/">“Top
10 Open Source Bug Tracking Systems”</a>
</p>
</li>

</ul>

</item>
</section>
<!-- REACHED HERE -->
<section xml:id="sources_of_advice">
<info>
<title>Sources of This Advice</title>
</info>

<p>
This is a short list of the sources from which this advice was taken which
also contains material for further reading:
</p>

<ol>

<li>
<p>
A large part of this document is derived from
<a xlink:href="http://perl-begin.org/tutorials/bad-elements/">a similar
document</a> written earlier for the Perl programming language.
</p>
</li>

<li>
<p>
<a xlink:href="$(ROOT)/books/advanced/#pbp">The
Book "Perl Best Practices"</a> by Damian Conway - contains a lot of good
advice and food for thought, but sometimes should be deviated from.
Also see the
<a xlink:href="https://www.socialtext.net/perl5/index.cgi?pbp_module_recommendation_commentary">"PBP
Module Recommendation Commentary"</a> on the Perl 5 Wiki.
</p>
</li>

<li>
<p>
<a xlink:href="https://www.socialtext.net/perl5/index.cgi?ancient_perl">"Ancient
Perl"</a> on the Perl 5 Wiki.
</p>
</li>

<li>
<p>
<a xlink:href="http://modernperlbooks.com/">chromatic's "Modern Perl" Book and
Blog</a>
</p>
</li>

<li>
<p>
The book <a xlink:href="http://www.refactoring.com/"><i>Refactoring</i> by Martin
Fowler</a> - not particularly about Perl, but still useful.
</p>
</li>

<li>
<p>
The book
<a xlink:href="http://pragprog.com/book/tpp/the-pragmatic-programmer"><i>The Pragmatic
Programmer: From Journeyman to Master</i></a> - also not particularly about
Perl, and I found it somewhat disappointing, but it is an informative book.
</p>
</li>

<li>
<p>
The list <a xlink:href="https://www.theopensourceway.org/wiki/How_to_tell_if_a_FLOSS_project_is_doomed_to_FAIL">“How
to tell if a FLOSS project is doomed to FAIL”</a>.
</p>
</li>

<li>
<p>
Advice given by people on
<a xlink:href="http://perl-begin.org/irc/#freenode">Freenode's #perl
channel</a>, on the Perl Beginners mailing list, and on other Perl forums.
</p>
</li>

<li>
<p>
Advice given by people on Freenode’s ##programming channel and on other forums.
</p>
</li>

</ol>

</section>
</body>
</document>
