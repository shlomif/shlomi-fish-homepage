#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long qw/ GetOptions /;
use File::Which qw/ which /;
use YAML::XS qw/ LoadFile /;
use Path::Tiny qw/ path /;

my $out_fn;
my $exes_fn;
my $modules_fn;

GetOptions(
    'o|output=s'     => \$out_fn,
    'exes-conf=s'    => \$exes_fn,
    'modules-conf=s' => \$modules_fn,
) or die "Failed - $!";

{
    my @not_found;

    foreach my $line ( path($exes_fn)->lines_utf8 )
    {
        chomp $line;
        my ($cmd) = ( $line =~ m{\A(\S+)} )
            or die "Wrong line - <$line>!";
        if (
            not(
                  ( $cmd =~ m{\A/} )
                ? ( -e $cmd )
                : ( defined( scalar( which($cmd) ) ) )
            )
            )
        {
            push @not_found, $line;
        }
    }

    if (@not_found)
    {
        print "The following commands could not be found:\n\n";
        foreach my $cmd ( sort { $a cmp $b } @not_found )
        {
            print "$cmd\n";
        }
        exit(-1);
    }
}

{
    my ($yaml_data) = LoadFile($modules_fn);

    {
        my $required_modules = $yaml_data->{required}->{perl5_modules};

        my @not_found;

        foreach my $m ( sort { $a cmp $b } keys(%$required_modules) )
        {
            my $v = $required_modules->{$m};
            local $SIG{__WARN__} = sub { };
            my $verdict = eval( "use $m " . ( $v || '' ) . ' ();' );
            my $Err = $@;

            if ($Err)
            {
                push @not_found, $m;
            }
        }

        if (@not_found)
        {
            print "The following modules could not be found:\n\n";
            foreach my $module (@not_found)
            {
                print "$module\n";
            }
            exit(-1);
        }
    }
    {
        my @required_modules = keys %{ $yaml_data->{required}->{py3_modules} };
        my @not_found;

        foreach my $module (@required_modules)
        {
            if ( system( 'python3', '-c', "import $module" ) != 0 )
            {
                push @not_found, $module;
            }
        }
        if (@not_found)
        {
            print "The following python3 modules could not be found:\n\n";
            foreach my $module (@not_found)
            {
                print "$module\n";
            }
            exit(-1);
        }
    }

    {
        my @not_found;

        my @required_files = @{ $yaml_data->{required}->{files} };
        foreach my $path (@required_files)
        {
            my $p = $path->{path};
            if ( $p =~ m#[\\\$]# )
            {
                die "Invalid path $p!";
            }
            if ( !-e ( $p =~ s#\A~/#$ENV{HOME}/#r ) )
            {
                push @not_found, $path;
            }
        }

        if (@not_found)
        {
            print "The following required files could not be found.\n";
            print "Please set them up:\n";
            print "\n";

            foreach my $path (@not_found)
            {
                print "$path->{path}\n$path->{desc}\n";
            }
            exit(-1);
        }
    }

}
path($out_fn)->spew_utf8("Success!");

exit(0);
