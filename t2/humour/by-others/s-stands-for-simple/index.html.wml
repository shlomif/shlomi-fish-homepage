#include '../template.wml'

<latemp_subject "SOAP - The S stands for Simple" />

<h2 id="note">Note</h2>

<p>
This bit appeared on Pete Lacey's blog and is mirrored from
<a href="http://harmful.cat-v.org/software/xml/soap/simple">the cat -v
    harmful stuff page</a>.
</p>

<h2>The S stands for Simple</h2>

<p><em>By Pete Lacey.</em></p>

<p>There has been a long running debate in the Application Platform Services
Group here at Burton Group between the REST people on one side and the SOAP
people on the other. For the most part it mirrors the external debate. In one
recent exchange, while discussing the complexity of SOAP and the web services
framework, the SOAP side said, “Before all of the WS-* stuff, SOAP was actually
simple. That’s what the ‘S’ stood for.”</p>

<p>And now a history lesson. It’s the year 2000, a harried developer has a problem</p>

<p><strong>Developer</strong>: So, my boss was playing golf this weekend, and now I have to ‘quote, unquote’ SOAP-enable the enterprise, but I don’t know what SOAP is. Can you help, SOAP Guy?</p>

<p><strong>SOAP Guy</strong>: Sure thing. First, SOAP stands for Simple Object Access Protocol.</p>

<p><strong>Dev</strong>: So it’s simple?</p>

<p><strong>SG</strong>: Simple as Sunday, my friend.</p>

<p><strong>Dev</strong>: Okay, lay it on me.</p>

<p><strong>SG</strong>: Well, just like it says in the name, SOAP is used for accessing remote objects.</p>

<p><strong>Dev</strong>: Like CORBA?</p>

<p><strong>SG</strong>: Exactly like CORBA, only simpler. Instead of some complex transport protocol that no one will let traverse a firewall, we use HTTP. And instead of some binary message format we use XML.</p>

<p><strong>Dev</strong>: I’m intrigued. Show me how it works.</p>

<p><strong>SG</strong>: Sure thing. First ther’s the SOAP envelope. It’s pretty simple. It’s just an XML document consisting of a header and a body. And in the body you make your RPC call.</p>

<p><strong>Dev</strong>: So this is all about RPCs?</p>

<p><strong>SG</strong>: Absolutely. As I was saying, you make your RPC call by putting the method name and its arguments in the body. The method name is the outermost element and each sub-element is a parameter. And all the parameters can be typed as specified right here in Section 5 of the specification.</p>

<p><strong>Dev</strong>: (reads Section 5) Okay, that’s not too bad.</p>

<p><strong>SG</strong>: Now, when your service is deployed, you specify the endpoint.</p>

<p><strong>Dev</strong>: Endpoint?</p>

<p><strong>SG</strong>: Endpoint, the address of the service. You POST your SOAP envelope to the endpoint’s URL.</p>

<p><strong>Dev</strong>: What happens if I GET the endpoint’s URL?</p>

<p><strong>SG</strong>: Don’t know. Using GET is undefined.</p>

<p><strong>Dev</strong>: Hrrm. And what happens if I move the service to a different endpoint? Do I get a 301 back?</p>

<p><strong>SG</strong>: No. SOAP doesn’t really use HTTP response codes.</p>

<p><strong>Dev</strong>: So, when you said SOAP uses HTTP, what you meant to say is SOAP tunnels over HTTP.</p>

<p><strong>SG</strong>: Well, ‘tunnel’ is such an ugly word. We prefer to say SOAP is transport agnostic.</p>

<p><strong>Dev</strong>: But HTTP isn’t a transport, it’s an application protocol. Anyway, what other “transports” does SOAP support?</p>

<p><strong>SG</strong>: Well, officially none. But you can potentially support any of ‘em. And there’s lots of platforms that support JMS, and FTP, and SMTP.</p>

<p><strong>Dev</strong>: Does anyone actually use these other transports?</p>

<p><strong>SG</strong>: Uhm, no. But the point is you can.</p>

<p><strong>Dev</strong>: Fine. How ’bout this SOAPAction HTTP header, what’s that for?</p>

<p><strong>SG</strong>: To be honest, no one’s really sure.</p>

<p><strong>Dev</strong>: And these ‘actor’ and ‘mustUnderstand’ attributes, does anyone use those?</p>

<p><strong>SG</strong>: No. Not really. Just ignore those.</p>

<p><strong>Dev</strong>: All right, let me give it a shot.</p>

<p>(time passes)</p>

<p><strong>Dev</strong>: Well, I could mostly make things work, but only if I stick with one SOAP stack. Also, I can’t say I like the idea of remote procedure calls and serializing objects.</p>

<p><strong>SG</strong>: Remote procedure calls! Serialized objects! Where did you get the impression that SOAP was about RPCs? SOAP is all about document-based message passing, my friend.</p>

<p><strong>Dev</strong>: But you just said –</p>

<p><strong>SG</strong>: Forget what I said. From here on in we pass around coarse-grained messages — you like that term, ‘coarse-grained?’ Messages that conform to an XML Schema. We call the new style Document/Literal and the old style RPC/Encoded.</p>

<p><strong>Dev</strong>: XML Schema?</p>

<p><strong>SG</strong>: Oh, it’s all the rage. Next big thing. Take a look.</p>

<p><strong>Dev</strong>: (Reads XML Schema spec). Saints preserve us! Alexander the Great couldn’t unravel that.</p>

<p><strong>SG</strong>: Don’t worry about it. Your tools will create the schema for you. Really, its all about the tooling.</p>

<p><strong>Dev</strong>: How are the tools gonna do that?</p>

<p><strong>SG</strong>: Well, they will reflect on your code (if possible) and autogenerate a compliant schema.</p>

<p><strong>Dev</strong>: Reflect on my code? I thought it was all about documents, not serialized objects.</p>

<p><strong>SG</strong>: Didn’t you hear me? It’s all about the tools. Anyway, we can’t expect you to write XML Schema and WSDL by hand. Besides, its just plumbing. You don’t need to see it.</p>

<p><strong>Dev</strong>: Whoa, back up. What was that word? Wizzdle?</p>

<p><strong>SG</strong>: Oh, haven’t I mentioned WSDL? W-S-D-L. Web Services Description Language. It’s how you specify the data types, parameter lists, operation names, transport bindings, and the endpoint URI, so that client developers can access your service. Check it out.</p>

<p><strong>Dev</strong>: (Reads WSDL spec). I trust that the guys who wrote this have been shot. It’s not even internally consistent. And what’s with all this HTTP GET bindings. I thought GET was undefined.</p>

<p><strong>SG</strong>: Don’t worry about that. Nobody uses that. Anyway, your tools will generate a WSDL, and in the WSDL will be the schema.</p>

<p><strong>Dev</strong>: But shouldn’t it be the other way ’round? Shouldn’t I design the contract first and then generate the code?</p>

<p><strong>SG</strong>: Well, yeah, I guess that sounds right in principle. But that’s not so easy to do, and very few SOAP stacks support WSDL-first development. Just let the tools worry about it.</p>

<p><strong>Dev</strong>: One more question. If we’re now passing around XML Schema compliant messages, where do you specify the operation name?</p>

<p><strong>SG</strong>: Well, remember that SOAPAction HTTP header? Most people are putting it there.</p>

<p><strong>Dev</strong>: Most people?</p>

<p><strong>SG</strong>: Well, this new style isn’t actually written down anywhere.</p>

<p><strong>Dev</strong>: I’ll also note that your entire industry is built around ambiguous, sometimes erroneous, and definitely not standardized specifications. In fact, the SOAP and WSDL specs are just W3C Notes, not even working drafts.</p>

<p><strong>SG</strong>: We’re working on that.</p>

<p><strong>Dev</strong>: Will this give me the interoperability I’ve been promised?</p>

<p><strong>SG</strong>: Absolutely.</p>

<p><strong>Dev</strong>: I’ll try it out.</p>

<p>(Time passes)</p>

<p><strong>Dev</strong>: This is getting ugly. The WSDL my tools generated can’t be consumed by the tools my partners use. Not only that, the schemas it generates are impenetrable and can’t be reused. And no tool seems to have agreed on how best to handle the SOAPAction header.</p>

<p><strong>SG</strong>: Sorry to hear that, buddy. On the bright side, nobody uses the Doc/Lit style any more. In order to get transport independence back we’re all using wrapped-doc/lit now. Doesn’t that sound cool: wrapped-doc/lit?</p>

<p><strong>Dev</strong>: What’s that?</p>

<p><strong>SG</strong>: Well, it’s just like Doc/Lit, but you take the whole message and wrap it in an element that has the same name as the operation. Now the operation name is back in the message where it belongs.</p>

<p><strong>Dev</strong>: Okay, where’s the spec on this?</p>

<p><strong>SG</strong>: Oh, there is no spec. This is just what Microsoft seems to be doing. Looked like a good idea, so now all the cool kids are doing it. However, there is this new thing. I think you’re gonna like it. It’s called the Web Services Interoperability Group, or the WS-I. What they’re doing is trying to remove a lot of the ambiguity in the SOAP and WSDL specs. I know how you like specs.</p>

<p><strong>Dev</strong>: So, in other words, the specs were so bad you need a standards body to standardize the standards. Lord. Well, will this solve my interoperability problems?</p>

<p><strong>SG</strong>: Oh, yeah. So long as you use a WS-I compliant SOAP stack, avoid using 8/10ths of XML Schema, don’t use any unusual data types, and don’t count on working with WebSphere and Apache Axis.</p>

<p><strong>Dev</strong>: And is wrapped-doc/lit explained in there?</p>

<p><strong>SG</strong>: Ermm, no. But that’s okay, you’re tools understand it. Most of them, anyway.</p>

<p><strong>Dev</strong>: Let me sum up. The definition of SOAP is in constant flux, SOAP is anything but simple, and it is no longer meant for accessing objects-even though that’s what all the tools still do.</p>

<p><strong>SG</strong>: That’s about right, but we’re way ahead of you on this. We’ve deprecated the meaning of the SOAP acronym.</p>

<p><strong>Dev</strong>: Really! What does it stand for now?</p>

<p><strong>SG</strong>: Nothing.</p>

<p><strong>Dev</strong>: (blink)</p>

<p><strong>SG</strong>: Let me tell you about UDDI.</p>

