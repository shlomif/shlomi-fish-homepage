[%- SET title = "Choice of Document Formats" -%]
[%- SET desc = "Choice of Document Formats" -%]
[%- SET more_keywords = "HTML, DocBook/XML, POD, TeX, LaTeX, documents, formats, document formats, perl, wiki, MediaWiki, markdown, AsciiDoc" -%]

[% main_class.addClass("fancy_sects") %]

[%- WRAPPER wrap_html -%]

[% WRAPPER h2_section id = "about"  title = "About this Document"  %]

<p>
This is an overview of popular documentation file formats, which is
derived from a reply I wrote to a thread in the
<a href="http://mail.pm.org/mailman/listinfo/boston-pm">Boston Perl Mongers
mailing list</a>.
</p>

[%- END -%]

[% WRAPPER h2_section id = "meta"  title = "Document Information"  %]

<dl class="meta">
<dt>
Written By:
</dt>
<dd>
<a href="http://www.shlomifish.org/">Shlomi Fish</a>
</dd>
<dt>
Finish Date:
</dt>
<dd>
23-July-2006
</dd>
<dt>
Last Updated:
</dt>
<dd>
24-March-2022
</dd>
</dl>

[% WRAPPER h3_section id = "licence"  title = "Licence"  %]

[% license_obj.by_british_blurb( "year" => "2006", ) %]

[%- END -%]

[%- END -%]

[% WRAPPER h2_section id = "summary"  title = "TL;DR Summary"  %]

<p>
My prefered documentation formats are (in order):
</p>

<ol>

<li>
<p>
Custom XML/etc. formats which I translate to DocBook 5 or XHTML5
using XSLT or similar.
</p>
</li>

<li>
<p>
<a href="#docbook">DocBook 5/XML</a>.
</p>
</li>

<li>
<p>
<a href="https://en.wikipedia.org/wiki/XHTML#XHTML5">XHTML 5</a>
</p>
</li>

<li>
<p>
Perl POD
</p>
</li>

<li>
<p>
AsciiDoc
</p>
</li>

</ol>

<p>
Sometimes I use <a href="http://template-toolkit.org/">Template Toolkit</a>
or similar to generate them.
</p>

[%- END -%]

[% WRAPPER h2_section id = "article"  title = "The Article Itself"  %]

<p>
A previous correspondent wrote:
</p>

<blockquote>
<p>
Write it in POD?
</p>
<p>
I’m not aware of any POD based Wikis, but it doesn’t seem like it would
be hard to merge the two approaches, with a “traditional” web-facing
wiki front-end that stores things as a POD-like syntax on the back.
</p>
<p>
This way, you get the collaborative editing and there are already tools
out there to convert the POD source to PDF etc.
</p>
</blockquote>

<p>
I think <a href="https://metacpan.org/pod/Kwiki">Kwiki</a> has a
plugin for <a href="http://perldoc.perl.org/perlpod.html">POD (Perl’s so-called
“Plain, Old, Documentation”)</a>.
</p>

<p id="docbook">
Just a note about POD: POD is incredibly limited. Some things that you may
want to try to do with it are not possible. It is not the only generic format
available, however. One option is naturally
<a href="https://docbook.org/">DocBook/XML</a>, which can be
translated into <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> (
both XHTML 1.x as well as XHTML 5 and HTML 5)
as well as <a href="https://en.wikipedia.org/wiki/PDF">PDF</a>,
Microsoft Word, <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a>,
<a href="https://en.wikipedia.org/wiki/EPUB">EPUB</a> and other
formats. It can be directly translated to plain text, either
using <a href="#docbookrx">docbookrx</a>,
or through
an intermediate format. POD can be translated into DocBook/XML using
[% cpan.self_mod( "m" => "Pod::PseudoPod::DocBook", ) %].
</p>

<p>
Don’t use the original module by Alligator Descartes which is the still the
first result on <a href="http://www.cpan.org/">CPAN</a> out of being
<a href="http://www.mail-archive.com/module-authors%40perl.org/msg00793.html">a
Dead Camel</a>. It is old and broken and has been unmaintained for a long time.
</p>

<p>
Note that the DocBook generated from the POD may not be perfectly semantically-correct due
to the fact DocBook is richer than POD.
</p>

<p>
Other alternatives for such markups that are somewhat
text-with-brief-style-specifiers can be found in
<a href="http://zgp.org/pipermail/linux-elitists/2005-August/thread.html#11265">this
Linux-elitists thread called “mini-markup language?”</a>. Prominent examples
include <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a> which can
be converted to HTML, XHTML and DocBook/XML using <a href="https://asciidoctor.org/">Asciidoctor</a>, and
the many <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> dialects,
which can only be converted to XHTML (and suffer from <a href="https://en.wikipedia.org/wiki/A_language_is_a_dialect_with_an_army_and_navy">fragmentation
and incompatibilities</a>).
</p>

<p>
They all can be converted to HTML and some of them to DocBook too. One Wiki or
another is also an option, but note that they tend to have incompatible
formats, and some may not have an ability to export as DocBook. I used to
like the
<a href="http://www.mediawiki.org/">MediaWiki</a> format which is an
extension of that of
<a href="http://www.usemod.com/cgi-bin/wiki.pl">UseModWiki</a> (and its
<a href="http://www.oddmuse.org/">Oddmuse Wiki fork</a>, which should be
better.), but I think that DokuWiki’s format is
also quite good. Note however that the MediaWiki format is very hard to
parse reliably, and it used to only have one ad hoc and hacky parser written
in PHP in the MediaWiki source. I really dislike the default Kwiki format, and
despite all
the flood of Kwiki plugins, no-one has written a
UseModWiki/Oddmuse/MediaWiki-subset format for it yet. I keep intending to
do that, but I have not find the time for this yet.
</p>

<p>
One recent note is that I grew to like the concept of <a href="https://en.wikipedia.org/wiki/Ikiwiki">ikiwiki</a>
and similar wikis which keep pages along with their history inside
a standard <a href="https://en.wikipedia.org/wiki/Version_control">version control
systems</a> for better reliability than MediaWiki's SQL-based storage or
the ad-hoc versioning systems of older wikis.
</p>

<p>
You can also try to use XHTML 1.1 or XHTML 5 with semantic markup of elements
for use as a good generic markup.
</p>

[% WRAPPER h3_section id = "markdowns" title = "Why the Markdown Dialects Should be Avoided as much as Possible" %]

<p>
There are too many <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> dialects (e.g: GitHub's, reddit's, Stack Exchange's) each one with its
<a href="https://en.wikipedia.org/wiki/A_language_is_a_dialect_with_an_army_and_navy">own army and navy (= fragmentation and incompatibilities</a>).
Moreover, they can only be converted to XHTML.
</p>

[% END %]

[% WRAPPER h3_section id = "latex"  title = "LaTeX and TeX"  %]

<p>
All that put aside, I should note that if you are thinking about using TeX or
LaTeX, please re-consider. Tex/LaTeX are very convenient for generating
PostScript or PDF but:
</p>

<ol>
<li>
<q>The only thing that can understand TeX is tex</q>. I believe it was said
much earlier than when Tom Christiansen ported that idiom to the Perl world. It is in
fact much more true for TeX than it is for Perl.
</li>

<li>
Conversion of LaTeX to DocBook or HTML often doesn’t work quite well.
Often, the tools are outdated and generate old or invalid HTML, and often
they break on more than complex LaTeX. TeX and LaTeX are Turing-complete, and
the syntax is incredibly problematic.
</li>

<li>
LaTeX has poor support for hypertext, and other PDF niceties.
</li>

<li>
PDF and PostScript, which are the default-and-least-error-prone TeX
output formats, have relatively poor accessibility and internationalisation. For
example, from my understanding Bi-directional text (mixed Arabic-English
text, etc.) is rendered visually.
</li>

<li>
It is easier to convert semantic XHTML or DocBook/XML to LaTeX than the
other way around.
</li>
</ol>

<p>
LaTeX is much less verbose than DocBook/XML, but I think you can find a better
format. It is is still usable for writing texts with lots of
mathematical formulae, but still a very problematic format. When working with
LaTeX I often get obscure TeX errors that I can’t tell immediately what
exactly went wrong. In DocBook/XML it just reports that one tag is missing, or
that the order of tags are incorrect, which takes me much less time to solve.
</p>

<p>
One option to convert simple LaTeX to DocBook 5/XML or XHTML is <a href="https://en.wikipedia.org/wiki/TeX4ht">TeX4ht</a> which works reasonably well,
and there is also <a href="https://en.wikipedia.org/wiki/MathJax">MathJax</a>.
</p>

[%- END -%]

[% WRAPPER h3_section id = "word-processors"  title = "Note about Word Processors"  %]

<p>
One may be tempted to use <a href="https://en.wikipedia.org/wiki/Word_processor_program">word
processors</a> such as <a href="https://en.wikipedia.org/wiki/Microsoft_Word">Microsoft Word</a>
or <a href="https://en.wikipedia.org/wiki/LibreOffice">LibreOffice</a> Writer, and they
provide the XML-based standards of <a href="https://en.wikipedia.org/wiki/OpenDocument">ODF</a>
and <a href="https://en.wikipedia.org/wiki/Office_Open_XML">.docx</a>. Part of the problem
is their conversion to output formats tends to be non-semantic if not completely
<a href="[% base_path %]philosophy/computers/web/validate-your-html/">non-valid</a>, and at least
in the case of Word, have a huge problem with maintaining compatibility of documents
created with newer or older versions. As I
<a href="https://www.reddit.com/r/linux/comments/9lwqc4/goodbye_dual_boot_system/e7dwqct/">noted
in a Reddit comment</a>, Word processors are the kind of programs that are created by smart
people for people who are less smart than them (because smart programmers can
use text editors and markup languages.)
</p>

<p>
Note that in the past,
I preferred using <a href="https://en.wikipedia.org/wiki/WordPerfect">WordPerfect</a>,
as a word processor,
over Microsoft Word (and later LibreOffice Writer) due to its "reveal codes" feature
(but WordPerfect was not ported to Microsoft Windows in time for it to be usable).
That put aside, I found <a href="https://en.wikipedia.org/wiki/Microsoft_Excel">Excel</a>,
<a href="https://en.wikipedia.org/wiki/Microsoft_Visio">Visio</a>,
and to a lesser extent <a href="https://en.wikipedia.org/wiki/Microsoft_PowerPoint">PowerPoint</a>
to be useful and usable applications. I avoid using their desktop versions due to
lack of portability, a non-[% my_acronym( "key" => "FOSS",) %] licence,
and the availability of some decent FOSS alternatives.
</p>

[%- END -%]

[% WRAPPER h3_section id = "more-about-POD"  title = "More about POD"  %]

<p>
Going full circle now - POD is a good option if it does what you need. The
Camel Book and other perl books were written in POD. I wrote some
documentation for Perl and non-Perl projects in POD. I also write some of
my
<a href="https://en.wikipedia.org/wiki/Man_page">man pages</a>
in POD because <a href="https://en.wikipedia.org/wiki/Nroff">nroff</a>'s
syntax scares me.
</p>

<p>
But if you feel that you want something better, you have many options.
</p>

<p>
One final note is that DocBook/XML was problematic for using in bi-directional
texts because of implementation or standard problems, last time I checked.
Otherwise, its Unicode support should be very good.
</p>

[%- END -%]

[%- END -%]

[% WRAPPER see_also__dash_id %]

<ul>

<li>
<p>
<a href="http://pandoc.org/">Pandoc</a> - converts between many formats
although not always flawlessly.
</p>
</li>

<li>
<p>
<a href="[% base_path %]open-source/projects/docmake/">docmake</a> - a command
line tool to translate DocBook/XML to its end formats.
</p>
</li>

<li>
<p>
<a href="https://weasyprint.org/">weasyprint</a> - a solution for converting
HTML pages to PDFs, which does not require a headless browser engine and
implements a subset of CSS.
</p>
</li>

<li id="docbookrx">
<p>
<a href="https://github.com/asciidoctor/docbookrx">docbookrx: (An early version of) a DocBook to AsciiDoc converter written in Ruby.</a>
</p>
</li>

<li>
<p>
<a href="https://metacpan.org/search?q=HTML%3A%3AWikiConverter">HTML::WikiConverter</a> - convert from HTML to wikis/etc. markups.
</p>
</li>

<li>
<p>
<a href="[% base_path %]philosophy/ideas/unixdoc/">Unixdoc</a> - a vision for a unified
documentation system.
</p>
</li>

<li>
<p>
<a href="[% base_path %]open-source/resources/editors-and-IDEs/">List of Text Editors and IDEs</a>
</p>
</li>

<li>
<p>
<a href="https://shlomif-tech.livejournal.com/74922.html">"The Despair of a Static Site Generator Creator"</a>
</p>
</li>

<li>
<p>
<a href="[% base_path %]meta/FAQ/why_xml.xhtml">FAQ: "Why are you still using XML?"</a>
</p>
</li>

</ul>

[%- END -%]

[% WRAPPER h2_section id = "coverage"  title = "Coverage and Comments"  %]

<p>
TODO: Fill in.
</p>

[%- END -%]

[% END %]
