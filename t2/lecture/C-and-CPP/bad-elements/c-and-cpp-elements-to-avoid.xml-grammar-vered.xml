<?xml version="1.0" encoding="utf-8"?>
<document xmlns="http://www.shlomifish.org/open-source/projects/XML-Grammar/Vered/" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.2.0" xml:lang="en-GB" xml:id="index">
<info>
<title>C and C++ Elements to Avoid</title>
</info>
<body>
<preface xml:id="intro">
<info>
<title>Introduction</title>
</info>
<p>
Often when people ask for help with C or C++ code, they show code that
suffers from many bad or outdated elements. This is expected, as there
are many bad tutorials out there, and lots of bad code that people
have learned from, but it is still not desirable. To encourage best
practices, here is a document of some of the common bad elements that
people tend to use and some better practices that should be used instead.
</p>
<p>
A book I read said, that as opposed to most previous idea systems, they
were trying to <b>liquidate negatives</b> instead of to instill positives
in people. So in the spirit of liquidating negatives, this tutorial-in-reverse
aims to show you what <b>not to do</b>.
</p>
<p>
<strong>Note:</strong> Please don't think this advice is meant as gospel.
There are some instances where one can expect to deviate from it, and a lot
of it can be considered only the opinion of its originators. I tried to filter
the various pieces of advice I found in the <a xlink:href="#sources_of_advice">sources</a>
and get rid of things that are either a matter of taste, or not so critical,
or that have arguments for and against (so-called
<a xlink:href="http://bikeshed.com/">colour of the bike shed arguments</a>),
but some of the advice here may still be controversial.
</p>
</preface>
<section xml:id="bad-elements">
<info>
<title>The List of Bad Elements</title>
</info>
<item xml:id="no-indentation">
<info>
<title>No Indentation</title>
</info>
<p>
<a xlink:href="http://en.wikipedia.org/wiki/Indent_style">Indentation</a> means
that the contents of every block are promoted from their containing environment
by using a shift of some space. This makes the code easier to read and follow.
</p>
<p>
Code without indentation is harder to read and so should be avoided.
<a xlink:href="http://en.wikipedia.org/wiki/Indent_style">The Wikipedia article</a>
lists several styles - pick one and follow it.
</p>
</item>
<item xml:id="no-compiler-warning-flags">
<info>
<title>No &quot;use strict;&quot; and &quot;use warnings;&quot;</title>
</info>
<p>
<b>TODO : FILL IN</b>
</p>
</item>
<item xml:id="calling-variables-file">
<info>
<title>Calling variables &quot;file&quot;</title>
</info>
<p>
Some people call their variables "file". However, file can mean either
<a xlink:href="http://en.wikipedia.org/wiki/File_descriptor">file handles</a>,
file names, or the contents of the file. As a result, this should be avoided
and one can use the abbreviations "fh" for file handle, or "fn" for filenames
instead.
</p>
</item>
<item xml:id="identifiers-without-underscores">
<info>
<title>Identifiers without underscores</title>
</info>
<p>
Some people name their identifiers as several words all in lowercase and
not separated by underscores ("_"). As a result, this makes the code harder
to read. So instead of:
</p>
<code_blk syntax="perl">
char * namesofpresidents[NUM_PRESIDENTS];
</code_blk>
<p>
Say:
</p>
<code_blk syntax="perl">
char * names_of_presidents[NUM_PRESIDENTS];
</code_blk>
<p>
Or maybe:
</p>
<code_blk syntax="perl">
char * presidents_names[NUM_PRESIDENTS];
</code_blk>
</item>
<item xml:id="paragraphs">
<info>
<title>Write code in Paragraphs using Empty Lines</title>
</info>
<p>
If one of your blocks is long, split it into "code paragraphs", with empty
lines between them and with each paragraph doing one thing. Then, it may be a
good idea to precede each paragraph with a comment explaining what it does, or
to extract it into its own function or method.
</p>
</item>
<item xml:id="lowercase_modules_and_pkgs">
<info>
<title>Don't start Classes with a Lowercase Letter</title>
</info>
<p>
In C++, classes <b>TODO: FILL IN</b>.
</p>
</item>
<item xml:id="non-intrusive-commenting">
<info>
<title>Avoid Intrusive Commenting</title>
</info>
<p>
Some commenting is too intrusive and interrupts the flow of reading the code.
Examples for that are the <code>/////////////</code> or
<code>/*****************/</code> hard-rules that
some people put in their code, the comments using multiple slashes
like <code>///</code>, or excessively long comment block. Please avoid all those.
</p>
<p>
Some schools of software engineering argue that if the code's author feels
that a comment is needed, it usually indicates that the code is not clear
and should be factored better (like extracting a method or a subroutine with
a meaningful name.). It probably does not mean that you should avoid writing
comments altogether, but excessive commenting could prove as a red flag.
</p>
<p>
If you're interested in documenting the public interface of your modules and
command-line programs, refer to tools such as
<a xlink:href="http://en.wikipedia.org/wiki/Doxygen">Doxygen</a>, which may
prove of use.
</p>
</item>
<item xml:id="accessing_object_slots_directly">
<info>
<title>Accessing Object Slots Directly</title>
</info>
<p>
<b>TODO: FILL IN</b>
</p>
</item>
<item xml:id="caret_and_dollar_sign_in_regexes">
<info>
<title>'^' and '$' in Regular Expressions</title>
</info>
<p>
Some people use "^" and "$" in regular expressions to mean
beginning-of-the-string or end-of-the-string. However, they can mean
beginning-of-a-line and end-of-a-line respectively using the <code>/m</code> flag
which is confusing. It's a good idea to use <code>\A</code> for start-of-string
and <code>\z</code> for end-of-string always (assuming they are supported
by the regex syntax), and to specify the <code>/m</code> flag
if one needs to use "^" and "$" for start/end of a line.
</p>
</item>
<item xml:id="magic_numbers">
<info>
<title>Magic Numbers</title>
</info>
<p>
Your code should not include <a xlink:href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants">unnamed
numerical constants also known as "magic numbers" or "magic constants"</a>.
For example, there is one in this code to shuffle a deck of cards:
</p>
<bad_code syntax="c">
for (int i = 0; i &lt; 52; i++)
{
    int j = i + int(rand(52-i));
    swap(cards[i], cards[j]);
}
</bad_code>
<p>
This code is bad because the meaning of 52 is not explained and it is
arbitrary. A better code would be:
</p>
<code_blk syntax="c">
const int deck_size = 52;

for (int i = 0; i &lt; deck_size; i++)
{
    int j = i + int(rand(deck_size-i));
    swap(cards[i], cards[j]);
}
</code_blk>
</item>
<item xml:id="mixing_tabs_and_spaces">
<info>
<title>Mixing Tabs and Spaces</title>
</info>
<p>
Some improperly configured text editors may be used to write code that, while
indented well at a certain tab size looks terrible on other tab sizes, due
to a mixture of tabs and spaces. So either use tabs for indentation or make
sure your tab key expands to a constant number of spaces. You may also wish
to make use of auto-formatters like <a xlink:href="http://en.wikipedia.org/wiki/Indent_%28Unix%29">GNU indent</a> to properly format your code.
</p>
</item>
<item xml:id="several_synchronised_arrays">
<info>
<title>Several synchronised arrays.</title>
</info>
<p>
<b>TODO : FILL IN</b>
Related to “varvarname” is the desire of some beginners to use several
different arrays with synchronised content, so the same index at every array
will contain a different piece of data for the same record:
</p>
<bad_code syntax="perl">
my @names;
my @addresses;
my @ages;
my @phone_numbers;

.
.
.

push @names, 'Isaac Newton';
push @addresses, '10 Downing St.';
push @ages, 25;
push @phone_numbers, '123456789';
</bad_code>
<p>
These arrays will become hard to synchronise, and this is error prone. A
better idea would be to use an array (or a different data structure) of
hash references or objects:
</p>
<code_blk syntax="perl">
my @people;

push @people, Person->new(
    {
        name => 'Isaac Newton',
        address => '10 Downing St.',
        age => 25,
        phone_number => '123456789',
    },
);
</code_blk>
</item>
<item xml:id="modifying_iterated_data_structures">
<info>
<title>Modifying data structures while iterating through them.</title>
</info>
<p>
Some people ask about how to add or remove elements to an existing array or
a different container when iterating over them using loops. The
answer to that is that it likely won't be handled too well, and it expects
that during loops the keys of a data structure will remain constant.
</p>
<p>
The best way to achieve something similar is to populate a new container
during the loop. So do that instead.
</p>
</item>
<item xml:id="code_in_foreign_lang">
<info>
<title>Comments and Identifiers in a Foreign Language</title>
</info>
<p>
Apparently, many non-native English speakers write code with comments and
even identifiers in their native language. The problem with this is that
programmers who do not speak that language will have a hard time understanding
what is going on here, especially after the writers of the foreign language
code post it in to an Internet forum in order to get help with it.
</p>
<p>
Consider what Eric Raymond wrote in
<a xlink:href="http://www.catb.org/~esr/faqs/hacker-howto.html#skills4">his
"How to Become a Hacker" document</a> (where hacker is a software enthusiast
and not a computer intruder):
</p>
<blockquote>
<p>
4. If you don't have functional English, learn it.
</p>
<p>
As an American and native English-speaker myself, I have previously been
reluctant to suggest this, lest it be taken as a sort of cultural imperialism.
But several native speakers of other languages have urged me to point out that
English is the working language of the hacker culture and the Internet, and
that you will need to know it to function in the hacker community.
</p>
<p>
Back around 1991 I learned that many hackers who have English as a second
language use it in technical discussions even when they share a birth tongue;
it was reported to me at the time that English has a richer technical
vocabulary than any other language and is therefore simply a better tool for
the job. For similar reasons, translations of technical books written in
English are often unsatisfactory (when they get done at all).
</p>
<p>
Linus Torvalds, a Finn, comments his code in English (it apparently never
occurred to him to do otherwise). His fluency in English has been an important
factor in his ability to recruit a worldwide community of developers for Linux.
It's an example worth following.
</p>
<p>
Being a native English-speaker does not guarantee that you have language skills
good enough to function as a hacker. If your writing is semi-literate,
ungrammatical, and riddled with misspellings, many hackers (including myself)
will tend to ignore you. While sloppy writing does not invariably mean sloppy
thinking, we've generally found the correlation to be strong — and we have no
use for sloppy thinkers. If you can't yet write competently, learn to.
</p>
</blockquote>
<p>
So if you're posting code for public scrutiny, make sure it is written with
English identifiers and comments.
</p>
</item>
<item xml:id="perlform">
<info>
<title>“using namespace std;”</title>
</info>
<p>
<b>TODO : FILL IN</b>
</p>
</item>
<item xml:id="law_of_demeter">
<info>
<title>Law of Demeter</title>
</info>
<p>
See the <a xlink:href="http://en.wikipedia.org/wiki/Law_of_Demeter">Wikipedia article
about "Law of Demeter" for more information</a>. Namely, doing many nested
method calls like
<code>obj-&gt;get_employee('sophie')-&gt;get_address()-&gt;get_street()</code>
is not advisable, and should be avoided.
</p>
<p>
A better option would be to provide methods in the containing objects to
access those methods of their contained objects. And an even better way would
be to structure the code so that each object handles its own domain.
</p>
</item>
<item xml:id="delegating_parameter_passing">
<info>
<title>Passing parameters in delegation</title>
</info>
<p>
Sometimes we encounter a case where subroutines each pass the same parameter
to one another in delegation, just because the innermost subroutines in the
callstack need it.
</p>
<p>
To avoid it, create a class, and declare methods that operate on the
fields of the class, where you can assign the delegated arguments.
</p>
</item>
<item xml:id="duplicate_code">
<info>
<title>Duplicate Code</title>
</info>
<p>
As noted in
<a xlink:href="http://www.shlomifish.org/philosophy/books-recommends/#refactoring">Martin
Fowler's "Refactoring"</a> book (but held as a fact for a long time
beforehand),
<a xlink:href="http://en.wikipedia.org/wiki/Duplicate_code">duplicate code</a> is a
code smell, and should be avoided. The solution is to extract duplicate
functionality into subroutines, methods and classes.
</p>
</item>
<item xml:id="long_functions">
<info>
<title>Long Functions and Methods</title>
</info>
<p>
Another common code smell is
<a xlink:href="http://c2.com/cgi/wiki?LongMethodSmell">long
subroutines and methods</a>. The solution to these is to extract several
shorter methods out, with meaningful names.
</p>
</item>
<item xml:id="ternary_operator_instead_of_if_else">
<info>
<title>Using the ternary operator for side-effects instead of if/else</title>
</info>
<p>
People who wish to use the ternary
inline- conditional operator (<code>? :</code>) for choosing to execute between
two different statements with side-effects
instead of using <code>if</code> and <code>else</code>. For example:
</p>
<bad_code syntax="cpp">
cond_var ? (hash["if_true"] += "Cond var is true")
          : (hash["if_false"] += "Cond var is false")
</bad_code>
<p>
(This is assuming the ternary operator was indeed written correctly, which
is not always the case).
</p>
<p>
However, the ternary operator is meant to be an expression that is a choice
between two values and should not be used for its side-effects. To do the
latter, just use <code>if</code> and <code>else</code>:
</p>
<code_blk syntax="cpp">
if (cond_var)
{
    hash["if_true"] += "Cond var is true";
}
else
{
    hash["if_false"] += "Cond var is false";
}
</code_blk>
<p>
This is safer, and better conveys one’s intentions.
</p>
<p>
For more information, refer to
<a xlink:href="http://www.nntp.perl.org/group/perl.beginners/2012/04/msg120480.html">a
relevant thread on the Perl beginners mailing list</a> (just make sure you read
it in its entirety).
</p>
</item>
<item xml:id="global_vars_iface">
<info>
<title>Using Global Variables as an Interface to the Module</title>
</info>
<p>
While it is possible to a large extent, one should generally not use global
variables as an interface to a module, and should prefer having a procedural
or an object oriented interface instead.
</p>
</item>
<item xml:id="declaring_all_vars_at_top">
<info>
<title>Declaring all variables at the top</title>
</info>
<p>
<b>TODO : FILL IN</b>
Some inexperienced Perl programmers, possibly by influence from languages
such as C, like to declare all variables used by the program at the top of
the program or the relevant subroutines. Like so:
</p>
<bad_code syntax="perl">
my $first_name;
my $last_name;
my $address;
my @people;
my %cities;
.
.
.
</bad_code>
<p>
However, this is bad form in Perl, and the preferable way is to declare all
the variables when they are first used, and at the innermost scope where they
should retain their value. This will allow to keep track of them better.
</p>
</item>
<item xml:id="trailing-whitespace">
<info>
<title>Trailing Whitespace</title>
</info>
<p>
With many editors, it can be common to write new code or modify existing
one, so that some lines will contain trailing whitespace, such as
spaces (ASCII 32 or 0x20) or tabs characters. These trailing spaces normally
do not cause much harm, but they are not needed, harm the code’s consistency,
may undermine analysis by patching/diffing and version control tools.
Furthermore, they usually can be eliminated easily without harm.
</p>
<p>
Here is an example of having trailing whitespace demonstrated using the
<code>--show-ends</code> flag of the GNU <a xlink:href="https://en.wikipedia.org/wiki/Cat_%28Unix%29">cat command</a>:
</p>
<code_blk syntax="text">
&gt; cat --show-ends toss-coins.pl
#!/usr/bin/perl$
$
use strict;$
use warnings;$
$
my @sides = (0,0);$
$
my ($seed, $num_coins) = @ARGV;$
$
srand($seed);  $
$
for my $idx (1 .. $num_coins)$
{$
    $sides[int(rand(2))]++;$
    $
    print "Coin No. $idx\n";$
}$
$
print "You flipped $sides[0] heads and $sides[1] tails.\n";$
&gt;
</code_blk>
<p>
While you should not feel bad about having trailing space, it is a good idea
to sometimes search for them using a command such as <code>ack '[ \t]+$'</code>
(in version 1.x it should be <code>ack -a '[ \t]+$'</code>, see
<a xlink:href="http://beyondgrep.com/">ack</a>), and get rid of them.
</p>
<p>
Some editors also allow you to highlight trailing whitespace when present. See
for example:
</p>
<ul>
<li>
<p>
<a xlink:href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">Highlight
unwanted spaces in Vim</a>. Also see <a xlink:href="http://vim.wikia.com/wiki/Highlight_unwanted_spaces">this post</a>.
</p>
</li>
<li>
<p>
<a xlink:href="http://emacswiki.org/emacs/ShowWhiteSpace">EmacsWiki:
Show White Space</a>.
</p>
</li>
</ul>
<p>
Finally, one can check and report trailing whitespace using the following
CPAN modules:
</p>
<ul>
<li>
<p>
<cpan_self_mod m="Test::EOL" />.
</p>
</li>
<li>
<p>
<cpan_self_mod m="Test::TrailingSpace" />.
</p>
</li>
</ul>
</item>
<item xml:id="code_and_markup_injection">
<info>
<title>Code and Markup Injection</title>
</info>
<p>
<b>TODO : FILL IN</b>
Care must be taken when constructing statements that are passed to an
interpreter, when putting arbitrary strings inside (using string interpolation
or other methods). This is because if the strings are subject to input from
the outside world (including the users), then one can use specially crafted
strings for executing arbitrary commands and exploiting the system.
</p>
<p>
An example of this is outputting HTML using
<code>print "&lt;p&gt;" . $paragraph_text . "&lt;/p&gt;\n";</code> which may allow
inserting arbitrary, malicious, markup inside <code>$paragraph_text</code>,
which may include malicious JavaScript, that can steal passwords or alter
the page’s contents.
</p>
<p>
For more information, see:
</p>
<ol>
<li>
<p>
<a xlink:href="../../topics/security/code-markup-injection/">“Code/Markup Injection
and Its Prevention”</a> resource on this site.
</p>
</li>
<li>
<p>
Wikipedia articles about
<a xlink:href="http://en.wikipedia.org/wiki/SQL_injection">SQL injection</a>
and
<a xlink:href="http://en.wikipedia.org/wiki/Cross-site_scripting">Cross-site
scripting</a>.
</p>
</li>
<li>
<p>
The site <a xlink:href="http://bobby-tables.com/">Bobby Tables</a> about SQL
injections.
</p>
</li>
</ol>
</item>
<item xml:id="decls_not_in_common_headers">
<info>
<title>Declarations not in common headers</title>
</info>
<p>
When declaring external functions, variables, classes, etc. make sure to
put them in a common header file, which will also be included by the .c or
.cpp file actually defining the common resource. This way if their type
is changed, you will get a compiler error in the module that defines it,
and there will be more certainty that there isn’t a type mismatch.
</p>
</item>
<!-- TODO:
* header with compiler guards.
-->
<!-- REACHED HERE -->
<item xml:id="init_arrays_from_arrayrefs">
<info>
<title>Initializing Arrays and Hashes from Anonymous References</title>
</info>
<p>
Some beginners to Perl are tempted to use the anonymous array reference
constructor (<code>[ … ]</code>) to initialise array variables, or alternatively
anonymous hash references (<code>{ … }</code>) to initialise hash variables, like
so:
</p>
<bad_code syntax="perl">
my @arr = [1 .. 10];
my %uk_info = { continent =&gt; "Europe", capital =&gt; "London", };
</bad_code>
<p>
However, these reference constructors actually create a single scalar that
contains a reference and, as a result, in the case of the array, one will have
a single element array, and in case of the hash, one will have an error
with a hash that was initialised only with a single key (that was converted
to a nonsensical string).
</p>
<p>
Array and hash variables should be initialized using lists enclosed in
parentheses:
</p>
<code_blk syntax="perl">
my @arr = (1 .. 100);
my %uk_info = ( continent =&gt; "Europe", capital =&gt; "London", );
</code_blk>
<p>
For more information about the difference between references and aggregate
variables, refer to our <a xlink:href="../../topics/references/">references</a>
page.
</p>
</item>
<item xml:id="long_lines">
<info>
<title>Overly Long Lines in the Source Code</title>
</info>
<p>
It is a good idea to avoid overly long lines in the source code, because
they need to be scrolled to read, and may not fit within the margins of your
co-developers’ text editors. If the lines are too long, you should break
them or reformat them (for example, by adding a newline before or after an
operator), and by breaking long string constants into several lines using
the string concatenation operator - <code>.</code>.
</p>
<p>
Many coding standards require lines to fit within 80 characters or
78 characters or so, and you should standardise on a similar limit for your
own code.
</p>
</item>
<item xml:id="no_upwards_for_dirs">
<info>
<title>Getting rid of special entries in directory contents</title>
</info>
<p>
Calling <pdoc_f f="readdir">readdir()</pdoc_f> repetitively, or calling it
in list context will normally return the two special entries of <filepath>.</filepath>
(the same directory) and <filepath>..</filepath> (the parent directory) which should not
be checked, and should normally be ignored. One can often find that people
are trying to skip them in various sub-optimal ways:
</p>
<bad_code syntax="perl">
if ($dir_entry =~ m/\A\./) # Will skip all directories that start with dot.
if ($dir_entry =~ m/^\./) # Same but \A is preferable for start-of-string.
if ($dir_entry =~ m/\A\.\.?\z/) # Obfuscated.
if ($dir_entry =~ m/\A\.{1,2}\z/) # Not much better.
if ($dir_entry eq "." or $dir_entry eq "..") # May not be portable.
</bad_code>
<p>
The best way to do that is to use <cpan_self_mod m="File::Spec" />’s
<code>no_upwards()</code> function:
</p>
<code_blk syntax="perl">
foreach my $entry (File::Spec-&gt;no_upwards(readdir($dir_handle))
{
}
</code_blk>
<p>
Note that <cpan_self_dist d="Path-Tiny" /> wraps that for you in its
<code>children()</code> function, and other file system abstraction modules provide
similar functionality.
</p>
</item>
<item xml:id="assigning_list_to_scalar">
<info>
<title>Assigning a List to a Scalar Variable</title>
</info>
<p>
Normally, assigning from a function or an expression that returns a list
to a scalar variable, will not yield what you want:
</p>
<bad_code syntax="perl">
my $characters = split(//, $string);
</bad_code>
<p>
This will cause the list as returned by split to be evaluated in scalar
context, and to return a single (and not very meaningful) scalar item.
You normally want one of those:
</p>
<code_blk syntax="perl">
my @characters = split(//, $string);
my $chars_aref = [ split(//, $string) ];
my $num_chars = () = split(//, $string); # Use length instead in this case.
</code_blk>
<p>
A lot of the confusion stems from the fact that people expect arrays in Perl
to be contained directly in scalars. For more information about that,
consult <a xlink:href="../../topics/references/">our page about references</a>.
</p>
</item>
<item xml:id="dot_asterisk">
<info>
<title>Regular Expressions starting or ending with “.*”</title>
</info>
<p>
It is not necessary to put <code>.*</code> or <code>.*?</code> into the beginning or
end of regular
expressions to match something anywhere inside the string. So for example
<code>if ($hay_stack =~ /.*ab+c.*/)</code> can be replaced with the simpler:
<code>if ($hay_stack =~ /ab+c/)</code>. If you wish to match and extract the
prefix, you should say <code>(.*?)</code> or <code>(.*)</code>.
</p>
</item>
<item xml:id="recursive_directory_traversal">
<info>
<title>Recursive Directory Traversal Without Using File::Find and Friends</title>
</info>
<p>
Some beginners to Perl are tempted to write a recursive directory traversal
(i.e: finding all files in a directory, its sub-directories, its
sub-sub-directories, etc.) by using procedural recursion or other sub-optimal
means. However, the idiomatic way is to use the core module File::Find or
its CPAN friends. For more information, see
<a xlink:href="../../uses/sys-admin/#directory_traversal">our resources about
directory traversal</a>.
</p>
</item>
<item xml:id="non_recursive_file_find">
<info>
<title>Using File::Find for listing the contents of a directory non-recursively</title>
</info>
<p>
Alternatively, sometimes people are tempted to use File::Find or similar
modules to non-recursively list the contents of a single directory. However,
in this case, it is a better idea to simply use
<pdoc_f f="opendir">opendir()</pdoc_f>,
<pdoc_f f="readdir">readdir()</pdoc_f> and
<pdoc_f f="closedir">closedir()</pdoc_f>, in conjunction with
<a xlink:href="#no_upwards_for_dirs">no_upwards</a>, or an abstraction of them.
</p>
<p>
File::Find and friends should be reserved for a recursive traversal.
</p>
</item>
<item xml:id="populating_array_with_same_reference">
<info>
<title>Populating an Array with Multiple Copies of the Same Reference</title>
</info>
<p>
You can sometimes see code like that:
</p>
<bad_code syntax="perl">
my @array_of_arrays = ([]) x $num_rows;
</bad_code>
<p>
Or:
</p>
<bad_code syntax="perl">
my @row;
my @array_of_rows;
foreach my $elem (@existing_array)
{
    @row = generate_row($elem);
    push @array_of_rows, \@row;
}
</bad_code>
<p>
The problem with code like this is that the same referent (see
<a xlink:href="../../topics/references/">our resources about references in
Perl</a>) is being used in all places in the array, and so they will
always be synchronised to the same contents.
</p>
<p>
As a result, the two code excerpts should be written as such instead:
</p>
<code_blk syntax="perl">
my @array_of_arrays = map { [] } (1 .. $num_rows);
</code_blk>
<p>And:</p>
<code_blk syntax="perl">
my @array_of_rows;
foreach my $elem (@existing_array)
{
    my @row = generate_row($elem);
    push @array_of_rows, \@row;
}
</code_blk>
<p>
Or alternatively:
</p>
<code_blk syntax="perl">
my @array_of_rows;
foreach my $elem (@existing_array)
{
    push @array_of_rows, [generate_row($elem)];
}
</code_blk>
</item>
<item xml:id="conditional_my_decls">
<info>
<title>Conditional my declarations.</title>
</info>
<p>
It is not a good idea to append a trailing if statement modifier to a
declaration of a lexical variable using <code>my</code>:
</p>
<bad_code syntax="perl">
my $var = VALUE() if (COND());
my ($var1, @array2) if (COND());
</bad_code>
<p>
This code might compile and appear to run but you probably want to declare
a lexical variable for the rest of its scope. If you need to assign to it
conditionally, then do it in a separate statement:
</p>
<code_blk syntax="perl">
my $var;
if (COND())
{
    $var = VALUE();
}
</code_blk>
</item>
<item xml:id="one_var_for_two_purposes">
<info>
<title>Using One Variable for Two (or More) Different Purposes</title>
</info>
<p>
Within the scope of its declaration, a variable should serve one purpose, and
serve it well. One should not re-use a variable for a completely different
purpose later on in the scope. Creating new variables is cheap in Perl and
should not be a concern to avoid clarity.
</p>
</item>
<item xml:id="backslash_n_on_rhs">
<info>
<title>Using \1 instead of $1 on the Right Hand Side of a Substitution</title>
</info>
<p>
There is no good reason to use <code>\\1</code>, <code>\\2</code>, etc. in the
right-hand-side of a substitution instead of <code>$1</code> <code>$2</code>
etc. While this may work, the backslash-digits variables are aimed at
back-references, such as matching the exact string of a capture again within
the left hand side of a regular expression:
</p>
<bad_code syntax="perl">
$s =~ s/(H\w+)\s+(W\w+)/\1 [=] \2/;
</bad_code>
<p>
Better code:
</p>
<code_blk syntax="perl">
$s =~ s/(H\w+)\s+(W\w+)/$1 [=] $2/;
</code_blk>
</item>
<item xml:id="appending_using_arr_increment">
<info>
<title>Appending using $array[$i++] = $value_to_append;</title>
</info>
<p>
Some people are tempted to append elements into an array using:
</p>
<bad_code syntax="perl">
my $last_idx = 0;
my @array;

foreach ...
{
    $array[$last_idx++] = $new_elem;
}
</bad_code>
<p>
However, it is better to use the <pdoc_f f="push" /> built-in function,
and so get rid of the explicit index, and make it less error prone:
</p>
<code_blk syntax="perl">
my @array;

foreach ...
{
    push @array, $new_elem;
}
</code_blk>
</item>
<item xml:id="premature_optimization">
<info>
<title>Premature Optimisation</title>
</info>
<p>
On various online Perl forums, we are often getting asked questions like:
“What is the speediest way to do task X?” or “Which of these pieces of code
will run faster?”. The answer is that in this day and age of extremely fast
computers, you should optimise for clarity and modularity first, and worry
about speed when and if you find it becomes a problem. Professor
Don Knuth had this to say about it:
</p>
<blockquote>
<p>
The improvement in speed from Example 2 to Example 2a is only about 12%, and many people would pronounce that insignificant. The conventional wisdom shared by many of today's software engineers calls for ignoring efficiency in the small; but I believe this is simply an overreaction to the abuses they see being practiced by penny-wise-and-pound-foolish programmers, who can't debug or maintain their "optimized" programs. In established engineering disciplines a 12% improvement, easily obtained, is never considered marginal; and I believe the same viewpoint should prevail in software engineering. Of course I wouldn't bother making such optimizations on a one-shot job, but when it's a question of preparing quality programs, I don't want to restrict myself to tools that deny me such efficiencies.
</p>

<p>
There is no doubt that the grail of efficiency leads to abuse. Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.
</p>
</blockquote>

<p>
(Knuth reportedly attributed the exact quote it to C.A.R. Hoare).
</p>
<p>
While you should be conscious of efficiency, and the performance sanity of
your code and algorithms when you write programs, excessive and premature
micro-optimisations are probably not going to yield a major performance
difference.
</p>
<p>
If you do find that your program runs too slowly, refer to our
<a xlink:href="../../topics/optimising-and-profiling/">page about Optimising and
Profiling Perl code</a>.
</p>
</item>
<item xml:id="version_control">
<info>
<title>Not Using Version Control</title>
</info>
<p>
For everything except for short throwaway scripts, or otherwise incredibly
short programs, there is no good excuse, not to use a version control system
(a.k.a: "revision control systems", "source control systems", or more in
general as part of "software configuration management"). This is especially
true nowadays given the availability of several powerful, easy to use,
open-source (and as a result free-of-charge), and cross-platform, version
control systems, that you should have not a lot of problems to deploy, learn
and use.
</p>
<p>
For more information and the motivation behind using version control systems,
see
<a xlink:href="../../tutorials/perl-for-newbies/part5/#page--version-control--DIR">the
relevant section out of the fifth part of “Perl for Perl Newbies”</a>
for more discussion about the motivation behind that, some links and a
demonstration.
</p>
<p>
Some links for further discussion:
</p>
<ul>
<li>
<p>
<a xlink:href="http://better-scm.shlomifish.org/">The Better SCM Site</a>
</p>
</li>
<li>
<p>
<a xlink:href="http://producingoss.com/en/vc-systems.html">The Free Version Control
Systems Appendix of <i>Producing Open Source Software</i></a>.
</p>
</li>
<li>
<p>
The Wikipedia
<a xlink:href="http://en.wikipedia.org/wiki/List_of_revision_control_software">List
of revision control software</a>.
</p>
</li>
<li>
<p>
<a xlink:href="http://perlhacks.com/2012/03/you-must-hate-version-control-systems/">“You
Must Hate Version Control Systems”</a> - a discussion on Dave Cross’ blog
about best practices in the software development industry.
</p>
</li>
</ul>
</item>
<item xml:id="automated_tests">
<info>
<title>Writing Automated Tests</title>
</info>
<p>
Automated tests help verify that the code is working correctly, that bugs
are not introduced due to refactoring or the addition of new feature, and also
provide specifications and interface documentation to the code. As a result,
automated tests have been considered a good practise for a long time.
</p>
<p>
For more information about how to write automated tests, see
<a xlink:href="../../uses/qa/">our page about quality assurance in
Perl</a>.
</p>
</item>
<item xml:id="properly_autoflushing">
<info>
<title>How to Properly Autoflush</title>
</info>
<p>
One can sometimes see people using <code>$| = 1;</code> to perform
<a xlink:href="http://stackoverflow.com/questions/4538767/how-flush-file-in-perl">autoflushing
to their filehandles</a>. However, this way is cryptic and is more errorprone
then doing something like:
</p>
<code_blk syntax="perl">
use IO::Handle;

STDOUT->autoflush(1);
</code_blk>
<p>
This makes the intent clearer and is clearer.
</p>
</item>
<item xml:id="conditional_use">
<info>
<title>Conditional "use" statements</title>
</info>
<p>
Some people are tempted to do something like that:
</p>
<bad_code syntax="perl">
if ($is_interactive)
{
    use MyModule;
}
</bad_code>
<p>
However <pdoc_f f="use">use</pdoc_f> is a compile-time statement and will
always be performed if detected. As a result one should instead use
<pdoc_f f="require">require</pdoc_f> or, less-preferably, string-eval
with the call to use within.
</p>
</item>
<item xml:id="parsing_using_regex">
<info>
<title>Parsing XML/HTML/JSON/CSV/etc. using regular expressions</title>
</info>
<p>
You should not try to parse HTML, XML, JSON, CSV, and other complex grammars
using regular expressions. Instead, use a CPAN module. For more information
see <a xlink:href="../../uses/text-parsing/">our page about Parsing in Perl</a>.
</p>
</item>
<item xml:id="using_punctuation_variables">
<info>
<title>Using most of the Perl punctuation variables from perlvar</title>
</info>
<p>
<pdoc d="perlvar" /> mentions many punctuation variables, but they make the
code hard to read, and most of them should be avoided, and have better
alternatives.
</p>
</item>
<item xml:id="generating_non_valid_markup">
<info>
<title>Generating invalid Markup (of HTML/etc.)</title>
</info>
<p>
You should make sure that the HTML markup you generate is
<a xlink:href="http://en.wikipedia.org/wiki/XHTML#Valid_XHTML_documents">valid
HTML</a> and that it validates as XHTML 1.0, HTML 4.01, HTML 5.0, or a
different modern standard. For more information, see
<a xlink:href="http://www.shlomifish.org/lecture/LAMP/slides/compatibility/">the
“Designing for Compatibility” section</a> in a previous talk.
</p>
<p>
Some bad code is:
</p>
<bad_code syntax="perl">
print &lt;&lt;'EOF';
&lt;P&gt;
&lt;FONT COLOR="red"&gt;Hello.
&lt;P&gt;
&lt;FONT COLOR="green"&gt;Mr. Smith
EOF
</bad_code>
<p>
A better code would be:
</p>
<code_blk syntax="perl">
print &lt;&lt;'EOF';
&lt;p class="greeting"&gt;
Hello
&lt;/p&gt;
&lt;p class="name"&gt;
Mr. Smith
&lt;/p&gt;
EOF
</code_blk>
</item>
<item xml:id="capturing_instead_of_clustering_in_regexes">
<info>
<title>Capturing Instead of Clustering in Regular Expressions</title>
</info>
<p>
If you want to group a certain sub-expression in a
<a xlink:href="$(ROOT)/topics/regular-expressions/">regular expression</a>,
without the need to capture it (into the <code>$1</code>, <code>$2</code>,
<code>$3</code>, etc. variables and related capture variables), then
you should cluster them using <code>(?: … )</code> instead of capturing
them using a plain <code>( … )</code>, or alternatively not grouping them
at all if it's needed. That is because using a cluster is faster and cleaner
and better conveys your intentions than using a capture.
</p>

<bad_code syntax="perl">
if (my (undef, $match) = ($str =~ /\A(BA+)*\[([^\]]+)\]/))
{
    print "Found $match\n";
}
</bad_code>

<p>
A better code would be:
</p>

<code_blk syntax="perl">
if (my ($match) = ($str =~ /\A(?:BA+)*\[([^\]]+)\]/))
{
    print "Found $match\n";
}
</code_blk>

<p>
Note that if you can afford to run your code only on perl 5.10.x and above,
then you can use <a xlink:href="http://www.perlmonks.org/?node_id=680796">named
captures</a>.
</p>

</item>
<item xml:id="regexes_wo_check_for_match_success">
<info>
<title>Using Regex Captures Without Checking if the Match was Successful</title>
</info>

<p>
It is tempting to perform a regular expression and use the capture variables -
<code>$1</code>, <code>$2</code>, <code>$3</code>, etc. without checking that
the regular expression match was successful:
</p>
<bad_code syntax="perl">
$my_string =~ /\A(\w+) (\w+)/;

my $first_name = $1;
my $last_name = $2;

print "Hello $first_name $last_name!";
</bad_code>

<p>
However, if the regular expression match operation is not successful, then
it is possible that these variables will remain with their values from the
previous successfulmatch operations, whatever they were.
</p>

<p>
A better code would be:
</p>

<code_blk syntax="perl">
if ($my_string =~ /\A(\w+) (\w+)/)
{
    my $first_name = $1;
    my $last_name = $2;

    print "Hello $first_name $last_name!";
}
else
{
    # Handle the error.
}
</code_blk>

<p>
Or better yet grab the matches from the regex return values directly:
</p>

<code_blk syntax="perl">
if (my ($first_name, $last_name) = $my_string =~ /\A(\w+) (\w+)/)
{
    print "Hello $first_name $last_name!";
}
else
{
    # Handle the error.
}
</code_blk>

</item>
<item xml:id="select_filehandle">
<info>
<title>Using select($file_handle)</title>
</info>
<p>
One should not use <pdoc_f f="select" />’s <code>select($file_handle)</code>
syntax to set the “currently selected filehandle” because this will affect
all subsequent uses by such functions as <pdoc_f f="print" /> and is a
sure-fire way to confuse the maintenance programmer. Instead, use
<cpan_self_mod m="IO::Handle" /> and its methods. For example:
</p>

<bad_code syntax="perl">
my $old_fh = select(STDERR);
$| = 1; # Set -&gt;autoflush()
select($old_fh);
</bad_code>

<p>
should be instead written as:
</p>

<code_blk syntax="perl">
use IO::Handle;
STDERR->autoflush(1);
</code_blk>

<p>
The second syntax of <code>select()</code> which tries to see which file
handles or sockets are active is of more valid use, but note that for a
simple delay, one should use <cpan_self_mod m="Time::HiRes" /> and otherwise,
there are some more efficient platform-specific methods to do that such as
<cpan_self_mod m="IO::Epoll" /> for Linux or kqueue for FreeBSD, which are
abstracted by event-driven programming frameworks on CPAN.
</p>

</item>
<item xml:id="non_recommended_regex_vars">
<info>
<title>Non-Recommended Regular Expression-related Variables</title>
</info>
<p>
The regular expression variables <code>$&amp;</code> (or
<code>$MATCH</code> in <code>use English;</code>), <code>$`</code> (
<code>$PREMATCH</code>), and <code>$'</code> (<code>$POSTMATCH</code>)
should normally not be used because using them incurs a penalty on
every regular expression match. As an alternative, one can use:
</p>

<code_blk syntax="perl">
$` ⇒ substr($var, 0, $-[0])
$&amp; ⇒ substr($var, $-[0], $+[0] - $-[0])
$' ⇒ substr($var, $+[0])
</code_blk>

<p>
Or alternatively use <code>${^MATCH}</code>,
<code>${^PREMATCH}</code>, and <code>${^POSTMATCH}</code> from perl-5.10.0
and onwards (see <pdoc d="perlvar" /> for more information about those).
</p>

<p>
Furthermore a plain <code>use English;</code> statement should be replaced
with a <code>use English qw( -no_match_vars ) ;</code> statement
to avoid referencing these variables.
</p>

</item>
<item xml:id="not_packaging_as_CPAN_like_distros">
<info>
<title>Not Packaging as CPAN-like Distributions</title>
</info>

<p>
It is a very good idea for Perl code that you develop for in-house use,
and place inside <code>.pm</code> module files to be packaged as a set of
CPAN-like distributions using the standard structure of
<code>lib/</code>, <code>Makefile.PL</code> or <code>Build.PL</code>,
<code>t/</code> etc. This will facilitate installing it, managing it, and
testing it. If your code is just lying around the hard disk, it is much
harder to deploy.
</p>

<p>
For more information see our <a xlink:href="$(ROOT)/topics/cpan/">page
about CPAN</a>.
</p>

</item>
<item xml:id="not_using_a_bug_tracker">
<info>
<title>Not Using a Bug Tracker/Issue Tracker</title>
</info>

<p>
It is important to use a <a
xlink:href="http://en.wikipedia.org/wiki/Bug_tracking_system">bug tracking</a>
system to maintain a list of bugs and issues that need to be fixed in your
code, and of features that you'd like to work on. Sometimes, a simple file kept
inside the version control system would be enough, but at other times, you
should opt for a web-based bug tracker.
</p>

<p>
For more information, see:
</p>

<ul>

<li>
<p>
<a xlink:href="http://www.joelonsoftware.com/articles/fog0000000029.html">Joel
on Software article about “Painless Bug Tracking”</a>
</p>
</li>

<li>
<p>
<a xlink:href="http://www.shlomifish.org/open-source/resources/software-tools/#bug_tracking">“Bug
Trackers” list</a> on Shlomi Fish’s “Software Construction and Management
Tools” page.
</p>
</li>

<li>
<p>
<a xlink:href="http://www.thegeekstuff.com/2010/08/bug-tracking-system/">“Top
10 Open Source Bug Tracking Systems”</a>
</p>
</li>

</ul>

</item>
<item xml:id="unrelated_packages_inside_modules">
<info>
<title>Unrelated packages inside modules</title>
</info>

<p>
If your module is <code>lib/MyModule.pm</code>, then it should only contain
namespaces/packages under <code>MyModule::</code>. If it contains
<code>package OtherModule;</code> then this in turn will be harder
to find and confusing. Preferably, every package should be inside its own
module (except for privately used ones).
</p>

</item>
<item xml:id="non_explicitly_imported_symbols">
<info>
<title>Non-explicitly-imported symbols</title>
</info>

<p>
When importing symbols from packages, it is a good idea to specify the symbols
that are reported explicitly, so one won't have to wonder where variables are
coming from. So:
</p>

<bad_code syntax="perl">
use MyLib;

print my_function(3,5), "\n";
</bad_code>

<p>
Should be replaced with:
</p>

<code_blk syntax="perl">
use MyLib qw( my_function );

print my_function(3,5), "\n";
</code_blk>

</item>
<item xml:id="excessive_calls_to_subs_in_other_packages">
<info>
<title>Excessive calls to subroutines in other packages</title>
</info>

<p>
It is not a good idea to put many and excessive calls to subroutines in other
packages (using the <code>MyModule::my_sub()</code> notation) in your code,
because it breaks encapsulation. Instead, make the module a class, instantiate
it as an object and call its methods.
</p>

</item>
<item xml:id="scalar-multi-dimensional-hash-emulation">
<info>
<title>Using the Scalar Multidimensional Hashes Emulation</title>
</info>

<p>
Please do not do the scalar multidimensional hashes emulation of perl:
</p>

<bad_code syntax="perl">
$myhash{$key1,$key2} = $my_value;

$value = $myhash{$key1,$key2};
</bad_code>

<p>
This is a relic of old versions of Perl and the proper way to do it is using
nested hashes and references, or with an explicit serialisation of the keys. It
also can be easily confused with a hash slice -
<code>@myhash{$key1,$key2}</code>
</p>

</item>
<item xml:id="the-dash-w-flag">
<info>
<title>Using the "-w" flag.</title>
</info>

<p>
It is important not to pass the "-w" flag in the sha-bang line of the Perl
program, because this turns on warnings <b>globally</b> and also interferes
with the more modern <code>use warnings;</code> statement. Unfortunately, many
legacy tutorials and codebases still show that.
</p>

<p>
So please rewrite this:
</p>

<bad_code syntax="perl">
#!/usr/bin/perl -w

use strict;
</bad_code>

<p>
Into this:
</p>

<code_blk syntax="perl">
#!/usr/bin/perl

use strict;
use warnings;
</code_blk>

<p>
Also see <a xlink:href="#no-strict-and-warnings">our section</a> about
why the lack of <code>use strict;</code> and <code>use warnings;</code> is
not recommended for more information.
</p>

</item>
<item xml:id="use-Module-VERSION">
<info>
<title>“use Module qw($VERSION @IMPORTS)”</title>
</info>

<p>
Perl will accept the following syntax for loading a particular version
of a module along with some imports:
</p>

<bad_code syntax="perl">
use Getopt::Long qw(2.36 GetOptionsFromArray);
</bad_code>

<p>
However, this syntax won't necessarily load the minimal version of the
module, and tools such as <a xlink:href="http://dzil.org/">Dist::Zilla</a>
won’t handle it properly. The proper way to do it is with the version number
given right after the module name, and before the imports list, delimited
by spaces on both sides:
</p>

<code_blk syntax="perl">
#!/usr/bin/perl

use Getopt::Long 2.36 qw(GetOptionsFromArray);
</code_blk>

<p>
This will work better.
</p>

</item>
</section>
<section xml:id="sources_of_advice">
<info>
<title>Sources of This Advice</title>
</info>

<p>
This is a short list of the sources from which this advice was taken which
also contains material for further reading:
</p>

<ol>

<li>
<p>
<a xlink:href="$(ROOT)/books/advanced/#pbp">The
Book "Perl Best Practices"</a> by Damian Conway - contains a lot of good
advice and food for thought, but sometimes should be deviated from.
Also see the
<a xlink:href="https://www.socialtext.net/perl5/index.cgi?pbp_module_recommendation_commentary">"PBP
Module Recommendation Commentary"</a> on the Perl 5 Wiki.
</p>
</li>

<li>
<p>
<a xlink:href="https://www.socialtext.net/perl5/index.cgi?ancient_perl">"Ancient
Perl"</a> on the Perl 5 Wiki.
</p>
</li>

<li>
<p>
<a xlink:href="http://modernperlbooks.com/">chromatic's "Modern Perl" Book and
Blog</a>
</p>
</li>

<li>
<p>
The book <a xlink:href="http://www.refactoring.com/"><i>Refactoring</i> by Martin
Fowler</a> - not particularly about Perl, but still useful.
</p>
</li>

<li>
<p>
The book
<a xlink:href="http://pragprog.com/book/tpp/the-pragmatic-programmer"><i>The Pragmatic
Programmer: From Journeyman to Master</i></a> - also not particularly about
Perl, and I found it somewhat disappointing, but it is an informative book.
</p>
</li>

<li>
<p>
The list <a xlink:href="https://www.theopensourceway.org/wiki/How_to_tell_if_a_FLOSS_project_is_doomed_to_FAIL">“How
to tell if a FLOSS project is doomed to FAIL”</a>.
</p>
</li>

<li>
<p>
Advice given by people on <a xlink:href="$(ROOT)/irc/#freenode">Freenode's #perl
channel</a>, on the Perl Beginners mailing list, and on other Perl forums.
</p>
</li>

</ol>

</section>
</body>
</document>
