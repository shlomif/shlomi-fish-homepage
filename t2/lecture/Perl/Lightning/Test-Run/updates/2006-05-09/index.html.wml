#include '../template.wml'
#include "cpan_dists.wml"

<latemp_subject "Test::Run - Update for 9-May-2006" />

<h2>*::Plugin::ColorSummary on CPAN</h2>

<p>
The colour-summaries lines were released on CPAN as
<cpan_self_dist d="Test-Run-Plugin-ColorSummary" />
and
<cpan_self_dist d="Test-Run-CmdLine-Plugin-ColorSummary" />.
They now allow configuring the colour in which the summary would be displayed.
</p>

<h2>To Percent or not to Percent?</h2>

<p>
On 22 April <a href="http://www.mail-archive.com/perl-qa%40perl.org/msg05711.html">Andy Lester (Test::Harness’ maintainer) announced</a>:
</p>

<blockquote>
<p>
Test me please: P/PE/PETDANCE/Test-Harness-2.57_06.tar.gz
</p>
<p>
I’m approaching the end of this release cycle. I really want to get this released.
</p>
<p>
I’ve removed the meaningless percentages of tests that have failed. If you
rely on the output at the end, it’s different now.
</p>
</blockquote>

<p>
But <a href="http://www.mail-archive.com/perl-qa%40perl.org/msg05714.html">not everybody liked it</a>:
</p>

<blockquote>
<p>
I don’t like the change myself. I’m bright enough to figure out that anything less than 100% pass is bad when developing.
</p>

<p>
When using other peoples test suites seeing, for example, 99% ok tells me
something very different from seeing 3% ok. For me the difference between
“nearly there apart form this bit of functionality that I don’t care about” and
“completely f**ked” is useful. Yes I can figure it out from the test/pass
numbers - but the percentage gives me a handy overview. Math is hard! :-)
</p>
</blockquote>

<p>
So <a href="http://www.mail-archive.com/perl-qa%40perl.org/msg05722.html">I
said</a>:
</p>

<blockquote>
<p>
This debate demonstrates why a plugin system is necessary for a test harness.
If it has it, then one can write a plugin to control whether or not
percentages are displayed.
</p>
</blockquote>

<h2>A Reusable TAP Parser</h2>

<p>
In the same discussion, people said they could really use a TAP parser/event
handler to process the tests and write custom event handlers using it.
</p>

<h2>“prove” &rarr; “runprove” with Test::Run::CmdLine::Prove</h2>

<p>
The prove testing command line utility was re-implemented for Test::Run as
runprove. Most of the functionality is found in the Test::Run::CmdLine::Prove
module which has a good test coverage.
</p>

<h2>Test-Run-TAP-Model</h2>

<p>
The <cpan_self_dist d="Test-Tap-Model" />
was adapted to Test::Run, after a talk with one of its developers.
</p>

<h2>More Ideas for the Future:</h2>

<ul>
<li>
XML Output.
</li>
<li>
HTML Output.
</li>
<li>
A Persistent Test Harness.
</li>
<li>
Integration into ExtUtils::MakeMaker, and Module::Build.
</li>
<li>
Colour the individual files’ status reports.
</li>
</ul>

