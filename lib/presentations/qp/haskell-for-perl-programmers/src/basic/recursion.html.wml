#include 'template.wml'

<h2>Length</h2>

<mycode>
<pre>
<span class="Comment">--  Type declaration : </span>
<span class="Comment">--      [a] - a linked list of any type</span>
<span class="Comment">--      x -&gt; y - function that accepts x and returns y</span>
mylen <span class="Statement">::</span> [a] <span class="Statement">-&gt;</span> Integer
<span class="Comment">-- Declare the length of the empty list to be 0</span>
mylen [] <span class="Statement">=</span> <span class="Constant">0</span>
<span class="Comment">-- x:xs == the list whose first item (the head) is x and the rest (the tail)</span>
<span class="Comment">-- is xs.</span>
mylen (x<span class="Statement">:</span>xs) <span class="Statement">=</span> <span class="Constant">1</span> <span class="Statement">+</span> (mylen xs)
</pre>
</mycode>

<h2>Fibonacci (Braindead)</h2>

<mycode>
<pre>
fib <span class="Statement">::</span> Integer <span class="Statement">-&gt;</span> Integer
fib <span class="Constant">0</span> <span class="Statement">=</span> <span class="Constant">0</span>
fib <span class="Constant">1</span> <span class="Statement">=</span> <span class="Constant">1</span>
fib a <span class="Statement">=</span> (fib (a<span class="Statement">-</span><span class="Constant">1</span>)) <span class="Statement">+</span> (fib (a<span class="Statement">-</span><span class="Constant">2</span>))
</pre>
</mycode>

<h2>Fibonacci (Less Braindead)</h2>

<mycode>
<pre>
<span class="Comment">-- (a,b) is a tuple whose first element is a and its second is b</span>
fibo_helper <span class="Statement">::</span> Integer <span class="Statement">-&gt;</span> (Integer,Integer)

fibo_helper <span class="Constant">0</span> <span class="Statement">=</span> (<span class="Constant">0</span>,<span class="Constant">1</span>)
<span class="Comment">-- Notice the use of the closure (where) to assign two temporary values</span>
fibo_helper n <span class="Statement">=</span> (b,a<span class="Statement">+</span>b) <span class="Type">where</span>
    (a,b) <span class="Statement">=</span> fibo_helper (n<span class="Statement">-</span><span class="Constant">1</span>)

<span class="Comment">-- (fst (a,b)) = a</span>
fibo n <span class="Statement">=</span> (fst (fibo_helper n))
</pre>
</mycode>
