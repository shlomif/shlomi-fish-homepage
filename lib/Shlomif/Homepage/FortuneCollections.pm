package Shlomif::Homepage::FortuneCollections;

use strict;
use warnings;
use 5.014;
use utf8;

use Moo;

use Shlomif::Homepage::FortuneCollections::Record ();

use JSON::MaybeXS    ();
use List::Util       qw(max);
use Path::Tiny       qw/ path /;
use Shlomif::FindLib ();
use YAML::XS (qw(LoadFile));

sub _init_fortune
{
    my ( $self, $rec ) = @_;

    return Shlomif::Homepage::FortuneCollections::Record->new($rec);
}

my $yaml_data_fn =
    Shlomif::FindLib->rel_path( [ 'Shlomif', 'fortunes-meta-data.yml' ] );
my $orig_fortunes_records =
    LoadFile($yaml_data_fn)->{'shlomif_fortunes_collections'}->{'fortunes'};

my @forts = ( map { __PACKAGE__->_init_fortune($_) } @$orig_fortunes_records, );

sub get_fortune_records
{
    my ($self) = @_;

    return \@forts;
}

sub sorted_fortunes
{
    my ($self) = @_;

    return [ sort { $a->id() cmp $b->id() } @{ $self->get_fortune_records() } ];
}

sub nav_data
{
    my ($self) = @_;

    return [ map { $_->nav_record() } @{ $self->get_fortune_records() } ];
}

sub calc_single_fortune_record_toc_entry
{
    my ( $self, $r ) = @_;

    my $id   = $r->id;
    my $desc = $r->desc;

    return (<<"EOF");
<li>
<p>
<a href="$id.html"><b>$id</b></a>
(<a href="$id.xml">XML</a>, <a href="$id">Plaintext</a>) -
$desc
</p>
</li>
EOF
}

sub get_single_fortune_record_all_in_one_page_entry
{
    my ( $self, $r ) = @_;

    my $id    = $r->id;
    my $title = $r->title;

    return <<"EOF";
<h2 id="$id">$title</h2>
<div class="fortunes_list">
(((((include "fortunes/xhtmls/$id.xhtml-for-input")))))
</div>
EOF
}

sub calc_fortune_records_toc
{
    my ($self) = @_;
    my $ret = '';

    foreach my $r ( @{ $self->get_fortune_records() } )
    {
        $ret .= $self->calc_single_fortune_record_toc_entry($r);
    }

    return $ret;
}

my $BODY_PARAMS = qq#[%- SET body_params = " class=\\"overflow_all\\"" -%]#;

sub get_fortune_all_in_one_page_html_tt2
{
    my ($self) = @_;
    my $title = "Shlomi Fish Fortunes Collections - All in One Page";

    my $ret = <<"EOF";
[%- # WARNING! This file is autogenerated by @{[__FILE__]} . Do not modify directly
    -%]

[%- SET title = "$title" -%]
[%- SET desc = "$title" -%]
$BODY_PARAMS

@{[$self->_get_common_tt2({single_page => 0, })]}

[%- WRAPPER wrap_html -%]

<nav class="page_toc">
<h2 id="toc">Table of Contents</h2>
<ul>
EOF

    foreach my $r ( @{ $self->get_fortune_records() } )
    {

        my $id    = $r->id();
        my $title = $r->title();

        $ret .= <<"FOO_EOF";
<li><a href="#$id">$title</a><br/>
(((((include "fortunes/xhtmls/$id.toc-xhtml")))))
</li>
FOO_EOF

    }

    $ret .= "</ul>\n";
    $ret .= "</nav>\n";

    foreach my $r ( @{ $self->get_fortune_records() } )
    {
        $ret .= $self->get_single_fortune_record_all_in_one_page_entry($r);
    }

    $ret .= "\n[% END %]\n";

    return $ret;
}

my $deps_mtime_max =
    max( map { path($_)->stat->mtime } __FILE__, $yaml_data_fn );

sub _print_if_update_needed
{
    my ( $self, $path, $contents_promise ) = @_;

    my $fh = path($path);

    if ( ( !$fh->exists() ) || ( $deps_mtime_max > $fh->stat->mtime ) )
    {
        $fh->spew_utf8( $contents_promise->(), );
    }

    return;
}

sub write_fortune_all_in_one_page_to_file
{
    my ( $self, $filename ) = @_;

    $self->_print_if_update_needed(
        $filename,
        sub {
            return $self->get_fortune_all_in_one_page_html_tt2();
        },
    );

    return;
}

sub _get_common_tt2
{
    my $self        = shift;
    my $args        = shift;
    my $single_page = $args->{'single_page'};

    my $ret = <<"EOF";
[% BLOCK page_extra_head_elements %]
<link rel="stylesheet" href="[% base_path %]fortunes.css" media="screen"/>
EOF

    if ($single_page)
    {
        $ret .= <<"EOF";
<script src="[% base_path %]js/previous-and-next-fortunes.js"></script>
EOF
    }

    $ret .= <<"EOF";
[% END %]
EOF

    return $ret;
}

sub get_single_fortune_page_html_tt2
{
    my ( $self, $r ) = @_;

    my $id    = $r->id();
    my $title = $r->title();

    my $body_params = ( ( $id eq "shlomif" ) ? "" : $BODY_PARAMS );

    return <<"EOF";
[%- # WARNING! This file is autogenerated by @{[__FILE__]} . Do not modify directly
    -%]

[%- SET title = "@{[$r->page_title()]}" -%]
[%- SET desc = "@{[$r->meta_desc()]}" -%]
$body_params
@{[$self->_get_common_tt2({single_page => 1, })]}

[%- WRAPPER wrap_html -%]

[% WRAPPER about_sect  %]

[% INCLUDE "fortunes/corner_image.tt2" %]

@{[$r->about_blurb() =~ s=\$\(ROOT\)/=[% base_path %]=gr]}

<p>
( <b>Note:</b> on chat services, I tend to use the nicknames <a href="[% base_path %]me/rindolf/">"rindolf"</a> orÂ "shlomif". )
</p>

[% END %]

[% WRAPPER h3_section id="fortunes-toc" title="Table of Contents" %]

(((((include "fortunes/xhtmls/$id.toc-xhtml")))))

[% END %]

[% WRAPPER h2_section id="fortunes-list" title="The Fortunes Themselves" %]

<div class="fortunes_list">
(((((include "fortunes/xhtmls/$id.xhtml-for-input")))))
</div>

[% END %]

[% END %]
EOF
}

sub print_all_fortunes_html_tt2s
{
    my ($self) = @_;

    my $dir = path("src/humour/fortunes");

    $dir->mkpath;
    foreach my $r ( @{ $self->get_fortune_records() } )
    {
        my $path = "$dir/@{[$r->id()]}.html.tt2";
        $self->_print_if_update_needed(
            $path,
            sub {
                return $self->get_single_fortune_page_html_tt2($r);
            },
        );
    }
}

sub write_epub_and_all_in_one
{
    my ( $self, $fn ) = @_;
    $self->write_fortune_all_in_one_page_to_file($fn);
    $self->write_epub_json('lib/fortunes/xhtmls/book.json');
    return;
}

sub write_epub_json
{
    my ( $self, $fn ) = @_;

    path($fn)->spew(
        JSON::MaybeXS->new( utf8 => 1, canonical => 1 )->encode(
            +{
                filename => $fn,
                title    => "Quotes / Fortunes Cookies by Shlomi Fish",
                authors  => [
                    {
                        name => "Shlomi Fish",
                        sort => "Fish, Shlomi",
                    }
                ],
                cover      => "shlomif-fortunes.jpg",
                rights     => "CC-by-sa",
                publisher  => 'http://www.shlomifish.org/',
                language   => 'en',
                subjects   => [ 'Humor', ],
                identifier => {
                    scheme => 'URL',
                    value  => q#http://www.shlomifish.org/humour/fortunes/#,
                },
                contents => [
                    {
                        type   => 'toc',
                        source => 'toc.xhtml',
                    },
                    (
                        map {
                            +{
                                type   => 'text',
                                source => ( $_->id() . ".xhtml" ),
                            }
                        } @{ $self->get_fortune_records() },
                    ),
                ],
                toc => {
                    depth    => 6,
                    parse    => ['text'],
                    generate => {
                        title => 'Index',
                    },
                },
            }
        )
    );
}

1;
