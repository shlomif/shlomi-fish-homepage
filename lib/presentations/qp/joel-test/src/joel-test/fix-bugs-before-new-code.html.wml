#include 'template.wml'

<points>
<li>
הגרסה הראשונה של Word for Windows נחשבה פרוייקט "מצעד המוות".
<br />

<ul>

<li>
הוא לקח נצח.
</li>

<li>
הוא נדחה עוד ועוד.
</li>

<li>
הקבוצה כולה עבדה שעות מטורפות והפרויקט נדחה שוב ושוב והלחץ היה נוראי.
</li>

<li>
כאשר הדבר הארור נגמר שנים מאוחר יותר, מיקרוסופט שלחה את כל הקבוצה לנופש בקאנקון,
וישבה לעשות חשבון נפש רציני.
</li>
</ul>

</li>

<li>
מה שהסתבר היה, שמנהלי הפרויקטים לחצו כל כך לשמור על
לוח הזמנים, והמתכנתים פשוט מיהרו ופיתחו קוד גרוע במיוחד, מכיוון
שתיקון באגים לא היה חלק מלוח הזמנים הרשמי.
</li>

<li>
הסיפור מספר על מתכנת אחד, שהיה צריך לכתוב
פונקציה לחשב את גובהה של שורת טקסט, וכתב בפשטות ";return 12" וחיכה
לדיווח באג.
</li>

<li>
בניתוח לאחר המוות, קראו לכך "מתודולוגיית אינסוף באגים".
</li>

<li>
כדי לתקן בעיה זו, מיקרוסופט אימצה שיטה הקרויה "מתודולוגית אפס באגים".
<br />
<ul>
<li>
"אפס באגים" משמעו שבכל נקודת זמן, העדיפות הגבוה ביותר היא לתקן
באגים <strong>לפני</strong> שכותבים קוד חדש.
</li>
</ul>
</li>

<li>
באופן כללי, ככל שמחכים יותר זמן לפני שמתקנים באג, העלות (בזמן וכסף) לתקנו גבוהה יותר.
</li>
</points>

<points>
<li>
סיבה נוספת הקשורה לעובדה היא שיותר קל <strong>לחזות</strong> כמה זמן יקח לפתח קוד חדש מאשר לתקן באג קיים.
</li>

<li>
אם יש לכם לוח זמנים והמון באגים פתוחים לתיקון, לוח הזמנים אינו אמין.
</li>

<li>
אבל אם תיקנתם את כל הבאגים <strong>הידועים</strong> , וכל מה שנותר הוא קוד חדש, לוח הזמנים
יהיה מדויק יותר באופן מפתיע.
</li>

<li>
דבר נהדר נוסף בהקפדה על אפס באגים הוא שניתן להגיב במהירות רבה יותר לתחרות.
<br/>
<ul>
<li>
מתכנתים אחדים מכנים זאת שמירה על מוצר <strong>מוכן להספקה</strong> בכל רגע נתון.
</li>
<li>
אם המתחרה מציג תכונה נהדרת חדשה אשר גורמת לאובדן לקוחות, תוכלו לממש רק את תכונה הזו
ולשחרר את המוצר מיידית, ללא צורך לתקן כמות גדולה של באגים צבורים.
</li>
</ul>
</li>

</points>

