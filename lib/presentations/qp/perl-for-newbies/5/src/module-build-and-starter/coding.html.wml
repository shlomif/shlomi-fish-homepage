#include 'template.wml'

<p>
If we look at the code of the <code>lib/â€¦*.pm</code> file, we'll see that there's
practically nothing there. So now it's time that we add some meaningful
code to the modules. But first we need to add some tests. Let's add this
test script under <code>t/add.t</code>
</p>

<quadpres_code_block>
<quadpres_include_colorized_file filename="src/module-build-and-starter/MyMath-Ops-with-add-t/t/add.t" filetype="perl" />
</quadpres_code_block>

<p>
Now we need to add it to the <code>MANIFEST</code>, so it will be included in
future versions of Perl. After we did it, let's run <code>./Build test</code>
to see the tests fail:
</p>

<quadpres_code_block>
$ perl Build.PL
Creating new 'MYMETA.yml' with configuration results
Creating new 'Build' script for 'MyMath-Ops' version '0.01'
$ ./Build test
t/00-load.t ....... 1/5 # Testing MyMath::Ops 0.01, Perl 5.012003, /usr/bin/perl5.12.3
t/00-load.t ....... ok
t/add.t ........... Can't locate object method "new" via package "MyMath::Ops::Add" at t/add.t line 11.
\# Looks like your test exited with 255 before it could output anything.
t/add.t ........... Dubious, test returned 255 (wstat 65280, 0xff00)
Failed 2/2 subtests
t/boilerplate.t ... ok
t/pod-coverage.t .. ok
t/pod.t ........... ok

Test Summary Report
-------------------
t/add.t         (Wstat: 65280 Tests: 0 Failed: 0)
  Non-zero exit status: 255
  Parse errors: Bad plan.  You planned 2 tests but ran 0.
Files=5, Tests=22,  1 wallclock secs ( 0.14 usr  0.04 sys +  0.56 cusr  0.11 csys =  0.85 CPU)
Result: FAIL
Failed 1/5 test programs. 0/22 subtests failed.
</quadpres_code_block>

<p>
So now we need to fix the tests. Open <code>lib/MyMath/Ops/Add.pm</code> and write
that:
</p>

<quadpres_code_block>
<quadpres_include_colorized_file filename="src/module-build-and-starter/MyMath-Ops-with-MyMath-Ops-Add-pm/lib/MyMath/Ops/Add.pm" filetype="perl" />
</quadpres_code_block>

<p>
And now let's run "./Build test" again:
</p>

<quadpres_code_block>
$ ./Build test
t/00-load.t ....... 1/5 # Testing MyMath::Ops 0.01, Perl 5.014002, /usr/bin/perl5.14.2
t/00-load.t ....... ok
t/add.t ........... ok
t/boilerplate.t ... ok
t/pod-coverage.t .. ok
t/pod.t ........... ok
All tests successful.
</quadpres_code_block>

<p>
Since all tests are successful, we can commit the changes to the repository.
</p>

<h3>Moving on</h3>

<p>
Now we can continue to add more tests, and then fix the failing ones. If the
code becomes too convoluted, due to modifications, we can
<a href="http://en.wikipedia.org/wiki/Code_refactoring">refactor it</a> and
improve its modularity. Running the existing automated tests after such a
change will better make sure that we didn't break something.
</p>

<p>
This "write more tests", "get tests to pass", "refactor" is the cycle of
development and maintenance, and Perl tools such as <code>Module-Build</code>
facilitate it.
</p>
